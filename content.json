{"pages":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world.html"},{"title":"","text":"404 Oops! You're lost. We can not find the page you're looking for. Return home or try the search bar below.","link":"/404.html"},{"title":"","text":"Yousang Park박유상 Edward* 조금씩, 앞으로. 남들보다 늦고 느리더라도 포기하지 않기.오늘의 내가 어제의 나보다 성장해 있기를. Education 한양대학교 ERICA 인공지능학과 ー 2021. 03. ~ (휴학) Awards 전국 콘텐츠코리아랩 연합 콘텐츠 해커톤 대회 아이디어상(4등상) ー 2019. 01. 23. ~ 25. Certificates 2021년 제2회 일본어능력시험(JLPT) N2 ー 2022. 01. 13.","link":"/about/index.html"},{"title":"Contact","text":"Let us help Lorem ipsum sdolor sic amit, bolero carles. Name Email Message Send Cancel","link":"/contact/index.html"},{"title":"Login","text":"Email * Password * Forget Password? Login or login using: Important Information Duis autem vel eum iriure at dolor vulputate velit esse vel molestie at dolore. More details","link":"/login/index.html"},{"title":"projects","text":"Edward* ー 조금씩, 앞으로.naeyong","link":"/projects/index.html"},{"title":"","text":"We are here to help you. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Multipurpose Template Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Well Documented Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Responsive Design Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. We're committed to our process. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste. Goal definition Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Analyse Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Implementation Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Recent Work Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde voluptatem. Sed unde omnis iste natus error sit voluptatem. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Multipurpose Documented Responsive Clean & Fresh Raw denim you probably haven't heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Read more Food truck fixie locavore, accusamus mcsweeney's marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee. Qui photo booth letterpress, commodo enim craft beer mlkshk aliquip jean shorts ullamco ad vinyl cillum PBR. Homo nostrud organic, assumenda labore aesthetic magna delectus mollit. Keytar helvetica VHS salvia.. Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney's organic lomo retro fanny pack lo-fi farm-to-table readymade. Messenger bag gentrify pitchfork tattooed craft beer, iphone skateboard locavore carles etsy salvia banksy hoodie helvetica. DIY synth PBR banksy irony. Leggings gentrify squid 8-bit cred pitchfork. Williamsburg banh mi whatever gluten-free, carles pitchfork biodiesel fixie etsy retro mlkshk vice blog. Scenester cred you probably haven't heard of them, vinyl craft beer blog stumptown. Pitchfork sustainable tofu synth chambray yr. Trust fund seitan letterpress, keytar raw denim keffiyeh etsy art party before they sold out master cleanse gluten-free squid scenester freegan cosby sweater. Fanny pack portland seitan DIY, art party locavore wolf cliche high life echo park Austin. Cred vinyl keffiyeh DIY salvia PBR, banh mi before they sold out farm-to-table VHS viral locavore cosby sweater. Lomo wolf viral, mustache readymade thundercats keffiyeh craft beer marfa ethical. Wolf salvia freegan, sartorial keffiyeh echo park vegan. Denim you probably haven't heard of. Lorem ipsum dolor met consectetur adipisicing sit amet, consectetur adipisicing elit, of them jean shorts sed magna aliqua. Lorem ipsum dolor met. Lina Mars Commercial Director Raw denim you Mustache cliche tempor, williamsburg carles vegan helvetica probably haven't heard of them jean shorts austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Kate Ford Commercial Director Reprehenderit butcher stache cliche tempor, williamsburg carles vegan helvetica.retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Jake Witson Commercial Director Metronic - The Most Complete &amp; Popular Admin &amp; Frontend Theme Preview Admin Our Clients Lorem dipsum folor margade sitede lametep eiusmod psumquis dolore.","link":"/index.html"},{"title":"Projects","text":"All UI Design Web Development Photography Wordpress and Logo Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back","link":"/projects/index.html"}],"posts":[{"title":"초보인 내가 Hexo 블로그를 만들며 겪은 우여곡절","text":"테마를 설치했다면 이제는 적용해 볼 차례이다. 여기서 필자는 꽤나 많이 애를 먹었다. 총 3번의 실패를 겪었고, 결국은 가장 대중적으로 쓰이는 icarus라는 테마에 일단은 정착하기로 했다. 실패의 과정에 대해서는 이어서 간단히 서술하겠다. ‘Hexo not found’ 에러 엊그제까지만 해도 잘 구동되던 Hexo가 어느 날 갑자기 먹통이 되었다. 아무리 Hexo 관련 명령어를 터미널에 입력해보아도 Hexo를 찾을 수 없다는 에러 메시지만이 나를 맞이했다. $ npm config set prefix /usr/local 내용을 입력하세요. Claudia 테마 디자인도 마음에 들었고 처음에 딱 꽂혔던 테마였다. 그런데 이 테마는 딸려오는 플러그인이 너무 많았다. 그 중에서 sass 플러그인이 필자의 컴퓨터와 계속해서 충돌을 일으켜서 결국 적용을 포기했다. Anisina 테마 그래서 이번에는 가급적 추가적인 플러그인 설치가 필요치 않은 테마를 찾아보기로 했다. 그렇게 발견한 것이 이 테마다. 그런데 초보자가 뜯어고치기에는 너무나 어려운 구조로 되어 있었다. 그래서 결국 이 테마도 포기했다. Icarus 테마구글링만 해 봐도 알 수 있듯이, Hexo로 구축된 블로그에서 가장 대중적으로 쓰이는 테마이다. 생김새도 무난하며 디자인을 수정하기도 쉬운 편이다. 수정하다 막히는 부분이 생겨도 구글링하면 어지간하면 다 나온다. 한국어로 설명된 자료도 많은 편이라 굳이 영어나 일본어로 적힌 블로그까지 찾아보지 않아도 괜찮았다.","link":"/2021/12/24/How-to-apply-Hexo-Theme/"},{"title":"초보인 내가 Hexo 블로그에 테마를 설치한 과정","text":"테마를 설치하는 방법 자체는 단순하다. 크게 두 가지 방법이 있는데, 첫 번째는 해당 테마의 GitHub 리포지터리를 클론해오는 방법이고 두 번째는 터미널에 Hexo의 테마 설치 명령어를 입력하는 방법이다. 전자의 방법을 따르고 싶다면 우선 터미널에서 hexo 폴더 내의 themes 디렉토리로 이동한 다음, 아래와 같은 명령어를 입력하면 된다. $ git clone {주소} ‘{주소}’ 를 해당 테마의 GitHub 리포지터리 주소로 대체하여 적어넣으면 된다. 보통은 해당 테마의 설명서를 읽어보면 나와있곤 하다. 후자의 방법을 따르고 싶다면 아래와 같은 명령어를 입력하면 된다. $ npm install {테마명} ‘{테마명}’ 을 해당 테마의 이름으로 대체하여 적어넣으면 된다. 보통은 hexo-theme-themename’의 구조로 되어있으며, 역시 해당 테마의 설명서를 읽어보면 나와있곤 하다. 설치가 다 되었다면 아래와 같은 명령어를 입력해준다. 블로그의 테마를 변경해주는 명령어이다. $ hexo config theme {테마폴더명} ‘{테마폴더명}’ 을 themes 디렉토리 아래에 있는 해당 테마의 폴더명으로 대체하여 적어넣으면 된다. 혹은, hexo 폴더의 _config.yml 파일에 들어가서 ‘themes: ‘ 항목을 해당 테마의 폴더명으로 직접 대체해도 된다. 위의 명령어는 단지 이 과정을 터미널을 통해 수행해주는 것뿐이다. 이제 테마를 설치하고 적용하는 과정은 모두 끝났다. 남은 것은 테마의 세세한 부분을 뜯어고치는 것뿐이다. 이것에 대해서는 다음 포스팅에서 다루도록 하겠다.","link":"/2021/12/20/How-to-install-Hexo-Theme/"},{"title":"M1 Mac에 TensorFlow 설치하기","text":"뜬금없지만 자랑부터 하자면, 필자는 최근에 M1 Pro 칩셋이 탑재된 신형 맥북 프로를 선물받았다. (와!) 이전에 쓰던 맥북 에어와는 차원이 다른 빠릿함이 낯설게만 느껴졌다. 가히 최고의 성능을 자랑하는 맥북 프로이지만, 아직 문제점이 몇 가지 있다. 그 중 하나는 바로 기존의 x86 아키텍처에서 구동되던 프로그램들의 상당수가 Apple Sillicon(애플 실리콘, 최신 맥북에 탑재되는 애플이 자체 개발한 칩셋)에 최적화되어 있지 않다는 것이다. TensorFlow를 다뤄본 적 없었던 필자는 우선 Anaconda-Navigator를 이용하여 가상 환경을 구축한 다음, TensorFlow를 설치하고자 했었다. 그러나 몇 번의 삽질과 구글링을 하던 와중에 Anaconda-Navigator가 애플 실리콘에서 제대로 구동되지 않는다는 정보를 알게 되었다. (아뿔싸!) 대신, 무려 애플 공식 개발자 사이트에서 애플 실리콘이 탑재된 Mac에 TensorFlow를 설치하는 방법을 친절하게 설명해 주고 있다는 사실 또한 알게 되었다. [(여기를 누르면 볼 수 있다)](https://developer.apple.com/metal/tensorflow-plugin/) 위의 링크로 들어가서 ‘arm64: Apple Sillicon’ 이라는 제목 아래에 있는 과정들을 전부 따라하면 된다. 해당 포스팅에도 설명을 해 두겠다. 우선 여기에서 애플 실리콘 전용 Conda env를 다운로드받은 다음, 아래의 명령어를 차례대로 터미널에 입력한다. 이는 애플 실리콘이 탑재된 Mac에서도 Conda 개발 환경을 구축할 수 있도록 해 주는 ‘Miniforge3’라는 툴을 설치하는 과정이다. $ chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh $ sh ~/Downloads/Miniforge3-MacOSX-arm64.sh $ source ~/miniforge3/bin/activate설치가 완료되었으면, 이번에는 아래 명령어를 입력하여 TensorFlow에 필요한 속성 파일들을 설치해준다. $ conda install -c apple tensorflow-deps이제 거의 다 끝났다. 남은 것은 아래의 두 명령어를 터미널에 입력해주는 것뿐이다. $ python -m pip install tensorflow-macos $ python -m pip install tensorflow-metal이렇게 해서 애플 실리콘이 탑재된 Mac에서 TensorFlow를 사용할 수 있게 되었다. Conda를 이용해 따로 가상의 개발 환경을 구축한 다음 Jupyter Notebook을 통해 사용할 수도 있는데, 이는 다음 포스팅에서 다루어보도록 하겠다.","link":"/2022/01/21/How-to-install-tensorflow-on-m1-mac/"},{"title":"Hexo Icarus 테마 커스터마이징 (v.221101)","text":"Hexo로 블로그를 만든 지도 1년이 다 되어 간다. 블로그는 겉치장보다는 내용이 중요하다지만 그래도 깔끔하게 꾸미면 보기에 더 낫지 않겠는가. 그래서 이참에 그동안 다듬고 싶었던 몇몇 사소한 부분들을 손보기로 했다. 컨테이너 너비 늘리기 여기서 말하는 컨테이너란 Icarus 테마에서 배경을 제외한 프로필과 위젯, 포스트 등이 표시되는 영역을 의미한다. 기본 설정 상 데스크탑 등에서 이 블로그를 볼 때 포스트를 표시하는 영역이 너무 좁다는 생각이 들어 다음과 같이 일부 수치를 조절해 주었다. px의 크기가 커질수록 컨테이너의 너비가 늘어난다. /themes/icarus/include/style/base.styl12345$gap ?= 64px$tablet ?= 769px$desktop ?= 1288px /* 증가시킴 */$widescreen ?= 1448px /* 증가시킴 */$fullhd ?= 1928px /* 증가시킴 */ 포스팅 날짜 표기 Icarus 테마는 기본적으로 포스팅한 날짜를 명확하게 표기하지 않고 ‘N일 전’, ‘N달 전’과 같이 표기하도록 설정되어 있다. 이것을 ‘YYYY. MM. DD.’ 형식으로 바꾸기로 했다. 이 블로그의 내용이 많은 도움이 되었다. /themes/icarus/layout/common/article.jsx12345678910111213module.exports = class extends Component { render() { &lt;div class=&quot;card&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; {page.layout !== 'page' ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt; &lt;div class=&quot;level-left&quot;&gt; {/* Creation Date */} {page.date &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.created_at', `/* &lt;time dateTime=&quot;${date_xml(page.date)}&quot; title=&quot;${new Date(page.date)}&quot;&gt; */ ${date(page.date)} /* &lt;/time&gt; */` /* &lt;time&gt; 태그를 지운다. 단, 코드 양쪽 끝의 `는 지우지 않는다. */ }}&gt;&lt;/span&gt;} 줄 간격 변경 Icarus 테마의 기본 줄 간격이 너무 좁다는 생각이 들어서 약간의 여유를 주기로 했다. line-height으로 줄 간격을 조절할 수 있다. margin-top으로 문단 사이의 간격도 조절할 수 있다. /themes/icarus/include/style/article.styl12345678article &amp;.article .content word-wrap: break-word font-size: $article-font-size line-height: 28px /* 줄 간격 */ color: #212121 /* 글자 색 */ margin-top: 28px /* 문단 간격 */ 카테고리 정비 기존의 무분별한 카테고리를 조금 다듬어보았다. 기존 마크다운 파일의 최상단에 categories: 항목을 다음과 같은 형태로 작성하면 하위 카테고리를 만들 수 있다. 123 categories:- 웹- 블로그 프로필 편집 프로필을 단순하게 표시하고 싶어서 기본적으로 제공되는 포스트/카테고리/태그 수, 팔로우 버튼, 소셜 링크 등 잡다한 것들을 모두 지워버렸다. 그리고 프로필 이미지나 닉네임을 누르면 CV 페이지로 연결되도록 설정해 보았다. /themes/icarus/layout/widget/profile.jsx123456789101112131415161718192021222324252627282930313233343536373839404142434445class Profile extends Component { render() { const { avatar, avatarRounded, author, authorTitle, location, // counter, * 포스트/카테고리/태그 수 관련 항목 // followLink, * 팔로우 버튼 관련 항목 // followTitle, * 팔로우 버튼 관련 항목 // socialLinks * 소셜 링크 관련 항목 } = this.props; return &lt;div class=&quot;card widget&quot; data-type=&quot;profile&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;nav class=&quot;level&quot;&gt; &lt;div class=&quot;level-item has-text-centered flex-shrink-1&quot;&gt; &lt;div&gt; &lt;figure class=&quot;image is-128x128 mx-auto mb-2&quot;&gt; &lt;a href=&quot;https://edward.moe&quot; target=&quot;_blank&quot;&gt; /* 프로필 이미지를 누르면 새 탭에서 해당 페이지가 열림 */ &lt;img class={'avatar' + (avatarRounded ? ' is-rounded' : '')} src={avatar} alt={author} /&gt; &lt;/a&gt; /* a 태그 닫아주기 */ &lt;/figure&gt; {author ? &lt;a href=&quot;https://edward.moe&quot; target=&quot;_blank&quot;&gt; /* 닉네임을 누르면 새 탭에서 해당 페이지가 열림 */ &lt;p class=&quot;title is-size-4 is-block&quot; style={{'line-height': 'inherit'}}&gt;{author}&lt;/p&gt; &lt;/a&gt; : null} /* a 태그 닫아주기 *//* * * 중략 * * */ return { avatar: getAvatar(), avatarRounded: avatar_rounded, author, authorTitle: author_title, location, /* 해당 부분 주석 처리 or 지우기 counter: { // CODE }, followLink: // CODE, followTitle: // CODE, socialLinks */ };}); 적용 폰트 변경 (가장 큰 난관) 조금 더 깔끔해 보이는 폰트를 원해서 고양일산체 (특별한 허가 없이 사용 가능한 폰트)를 적용하려 했다. 그러나 로컬에서는 잘 적용되는 것을 확인했으나, 서버에 업로드했을 때에는 변경된 폰트가 적용되지 않았다. 그래서 보다 보편적으로 쓰이고 있는 나눔스퀘어체를 대안으로 삼았으나 이 역시 로컬에서만 적용되었다. 브라우저에 쌓인 캐시를 삭제하는 등의 시도도 당연히 해 보았으나 결국 실패했다. /themes/icarus/include/style/base.styl123456@import url('../../source/fonts/GoyangIlsan.css')@import url('https://webfontworld.github.io/naver/NanumSquare.css')@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR&amp;display=swap')$family-sans-serif ?= 'GoyangIlsan', 'NanumSquare', Noto Sans CJK KR, Noto Sans KR$family-code ?= 'Source Code Pro', monospace GoyangIlsan.css123456789101112131415@font-face { font-family: 'GoyangIlsan'; font-weight: 700; font-style: normal; src: url('/fonts/GoyangIlsanR-Regular.woff2') format('woff2'); font-display: swap;}@font-face { font-family: 'GoyangIlsan'; font-weight: 400; font-style: normal; src: url('/fonts/GoyangIlsan_L.woff2') format('woff2'); font-display: swap;} 그러던 중 구글링을 통해 Hexo에 대한 새로운 사실을 알아냈다. (힌트를 얻은 블로그) hexo server 명령어를 통해 로컬에서 가동할 때에는 css의 변경 사항이 즉시 반영되지만, hexo d -g 명령어를 통해 서버의 내용을 갱신할 때에는 변경 사항이 반영되지 않는 이슈가 있다는 것이었다. 실제로 확인해 보니 GitHub 상의 리포지터리에 있는 css 디렉토리를 삭제하여도 hexo deploy 명령어를 입력하면 몇 개월 전에 커밋했던 css 파일들이 복구될 뿐이었다. 그래서 GitHub 상에 있는 css 파일을 직접 수정해 보기로 했다. css 디렉토리 안에 있는 default.css와 style.css를 수정했다. 그러나 다시 hexo deploy 명령어를 입력하자 커밋 내역이 사라지고 기존 파일들로 다시 대체되었다. 그 때 눈에 들어온 것이 있었으니, 바로 hexo가 설치된 디렉토리 바로 아래에 있는 public 폴더였다. public 폴더 안에는 GitHub 상에 있는 것과 똑같은 파일 및 폴더들이 자리하고 있었다. 그 중에서 css 디렉토리 안에 있는 default.css와 style.css를 수정한 뒤, hexo clean 명령어를 실행하고 나서 다시 hexo d -g 명령어를 실행하니 변경 사항들이 정상적으로 적용되는 것을 볼 수 있었다. 지금까지 ./themes/icarus 디렉토리 아래에 있는 파일들을 수정하는 데에만 집중하다 보니 등잔 밑이 어두운 줄도 모르고 있었던 것이다. /public/default.css & style.css1234567891011121314151617font-family: 'GoyangIlsan', 'NanumSqaure', 'Noto Sans CJK KR', 'Noto Sans KR', Ubuntu, Roboto, sans-serif;/* 모든 폰트 관련 코드 수정 */html { background-color: #fce4ec; }/* 배경색 관련 코드 수정 */a { color: #e91e63; }/* 모든 강조색 관련 코드 수정 */.content h1 { padding-left: 8px; border-left: 8px solid #e91e63; }/* 모든 h1, h2의 왼쪽에 포인트 색상 추가 *//* * * 이하 생략 * * */ 마침내, css 변경 사항들을 적용하는 데에 성공했다! 이것을 과연 ‘성공’했다고 말할 수 있는지는 모르겠지만 아무튼 원하는 대로 커스터마이징된 블로그를 보니 기분이 좋았다. 이틀에 걸쳐 작업한 보람이 있었다. 이상으로 Hexo 블로그의 Icarus 테마의 일부를 커스터마이징하는 방법에 대한 서술을 마친다.","link":"/2022/10/31/How-to-customize-Hexo-Theme/"},{"title":"초보인 내가 Hexo 블로그를 만든 과정","text":"이전에도 블로그를 운영해 본 경험은 많이 있었지만, 이렇게 직접 밑바닥부터(?) 하나하나 쌓아가며 만든 블로그는 여기가 처음이다. 사실 아예 무에서 유를 창조한 것은 아니고, Hexo라는 툴의 도움을 받았다. Hexo가 무엇인지에 대해서는 이미 다른 블로거들이 충분히 설명해두었을 테니, 여기서는 빠르게 여러분이 원하는 본론ー블로그를 설치하는 과정으로 들어가겠다. 사실 https://hexo.io/ko/docs/ 에 들어가면 모든 내용이 설명되어 있긴 하다. 영어 독해가 되시는 분은 https://hexo.io/docs/ 를 보셔도 좋다. 필자의 컴퓨터에는 Git이나 Node.js는 이미 설치되어 있었기에 위 문서에서 설명하는 대로 Hexo를 설치하기 위해 곧바로 터미널에 다음과 같이 명령어를 입력했다. $ npm install -g hexo-cli 그런데 ERESOLVE 에러가 나며 설치가 되지 않았다. 이 블로거 분께서 말씀하시길, Node.js의 버전과 npm의 버전에 따라서 서로 호환이 잘 안 되는 경우가 있다고 한다. 초보자로서 잘은 모르겠지만 그러려니 하며 일단 16.x 버전의 Node.js를 구버전인 12.x 버전으로 다운그레이드하기로 했다. 다음 명령어를 입력하면 기존에 설치된 Node.js의 버전을 v12.18.3으로 다운그레이드할 수 있다. $ npm install -g n $ n 12.18.3 다운그레이드가 잘 되었는지는 다음 명령어를 통해 확인할 수 있다. 자신이 설치하고자 한 버전과 같은 숫자가 뜨면 성공한 것이다. $ node -v 아무튼 이렇게 해서 Hexo를 설치했다면, 다음은 블로그 환경을 구축할 차례이다. 적당한 곳에 새로운 폴더를 만들고 해당 디렉토리에 들어간 다음, Hexo 블로그 환경을 구축하기 위한 명령어를 입력해준다. $ hexo init hexo $ cd hexo $ npm install 첫 번째 명령어는 Hexo의 초기 환경을 세팅하는 명령어이다. ‘hexo’ 라는 하위 폴더에 필요한 파일들을 설치한다는 의미로 이해하면 된다. 그리고 두 번째 명령어를 입력하여 앞서 만들어진 하위 폴더로 이동한 다음, 세 번째 명령어를 입력하여 Hexo 구동에 필요한 Node 모듈을 설치해주는 것이다. 위의 과정을 모두 끝마쳤다면 터미널에 다음과 같은 명령어를 입력하여 설치가 잘 되었는지 테스트해보자. $ hexo server 위의 명령어는 로컬 서버를 가동하는 명령어로, 입력하였을 때 별다른 에러가 발생하지 않는다면 성공한 것이다. 주소창에 ‘localhost:4000’ 을 입력하여 들어가보면 기본 테마가 적용된 Hexo 블로그의 모습이 나타날 것이다. $ hexo server -o 혹은 위와 같이 명령어 뒤에 ‘-o’ 를 붙이면 로컬 서버를 가동시키는 동시에 새 창을 띄워 자신의 블로그 페이지의 모습을 확인할 수 있다. 필요에 따라 두 명령어 중 하나를 사용하면 된다. 이상으로 기본적인 Hexo 설치 및 블로그 환경 설정 과정을 설명하였다. 다음에는 블로그에 새로운 테마를 적용하고 테마를 수정했던 과정에 대해 포스팅하겠다. 필자는 의외로 이 부분에서 꽤 고생했기 때문에 부디 해당 포스팅이 조금이나마 다른 초보자들에게 도움이 되었으면 좋겠다.","link":"/2021/12/13/How-to-make-Hexo-Blog/"},{"title":"퇴마묵시록 관련 공지","text":"퇴마묵시록(退魔黙示録, Apocalypsis Exorcismus)은 필자가 개발중인 동인 게임이다. 서비스 종료된 교육용 MMORPG 한자마루와 세계관을 공유하는 비영리 2차 창작 오프라인 RPG로서 개발 중이다. Windows와 macOS를 지원할 예정이며, 2023년 하반기 공개를 목표로 하고 있다. 메인 스토리 🔓 깨어진 봉인 신마소제가 마지막으로 그 모습을 감춘 지 사백오십 년이 되는 해, 퇴마사를 양성하는 마법학교를 다니던 예비퇴마사 정안이 마법서고에서 정체를 알 수 없는 힘을 발하는 고대 마법석 조각을 발견한 뒤 그 힘에 빠져들어 그만 어둠의 힘에 굴복해버렸습니다. 마법석 조각 속에 갇혀 있던 신마소제의 영혼에게 몸과 마음을 빼앗겨버린 정안은 학교를 떠나 오십 년 동안 세상을 떠돌아 다니다가 결국 대륙의 서쪽 끝에서 오백 년 전 퇴마사들이 만들어 두었던 결계의 봉인을 찾아냈습니다. 그리고 봉인을 깨트리고 그 속에 감춰져 있던 어둠의 땅 그림자땅으로 가는 길을 다시 열었습니다. 그리고 신마소제가 정안의 몸과 마음을 빌어서 부활해 다시 세상에 나타났습니다. 신마소제와 퇴마사단의 기나긴 싸움은 오백 년 만에 다시 시작되었습니다. 🗡 궁지에 몰린 퇴마사단 결계의 봉인이 풀리고 신마소제가 부활함에 따라 마족과 마물들이 깨어나 세상은 온통 혼란에 빠져들었습니다. 신마소제에 맞서기 위해 전 세계에서 많은 퇴마사들이 모였지만, 소제와 신마군단의 힘은 너무나 강력했고 퇴마사단은 진퇴양난의 위기에 내몰렸습니다. 마을 곳곳이 마물들에게 습격당해 폐허로 변해버렸고, 소수의 퇴마사들만이 퇴마사단 해저기지를 거점으로 하여 명맥을 이어가게 되었습니다. 그로부터 약 십여 년이 흘러 국제 마법학교를 관장하던 교장 마루한이 타계했습니다. 그의 장례식이 엄수되던 도중 자신을 정안의 사자라 칭하는 이가 나타나 정안의 계시를 전했고, 소수정예의 퇴마사들이 그 말에 따라 그림자땅으로의 모험을 떠나기로 했습니다. 퇴마사들의 여정은 아직 끝나지 않았습니다. (※ 아래 링크는 아직 완성되지 않은 게임의 개발 과정을 담고 있습니다.스포일러를 원치 않으시는 분들은 주의해주세요!) game.edward.moe에 그날그날의 개발 진척 상황을 수시로 기록하고 있습니다.","link":"/2022/09/26/apocalypsis-exorcismus/"},{"title":"CV 페이지를 만들어보았다 [1부]","text":"오래 전부터 필자는 자신만의 CV 페이지를 갖고 싶어했다. 정작 남들 앞에 내세울 경력도 실력도 없는 필자이지만, 아무튼 개발자를 지망하는 이들이라면 누구나 그러한 생각을 해 보았을 것이다. 미려한 디자인의 CV부터 밋밋하지만 실속 있는 CV까지, 이미 많은 개발자들이 자신만의 개성이 담긴 CV 페이지를 가지고 있다. 무릇 개발자라면 CV 페이지 쯤은 직접 만들어야 마땅한 것이다. 한 줌도 채 안 되는 html 지식을 가진 필자는 이번 기회에 html/css에 더욱 친숙해지기 위해 바닥부터 직접 시작해보기로 했다. 레이아웃의 기본 틀은 여기에서 도움을 받았다. 우선 코드 작성에 앞서 CV 페이지의 UI 디자인을 간단히 해 보기로 했다. 깔끔하면서도 너무 밋밋하지 않은 디자인을 원했다. 주요 색상은 Material Design Palette의 Pink 색상을 사용하였다. 1234567891011121314151617181920&lt;style&gt;header {height: 96px;} /* 상단 여백 */article { position: absolute; left: 50%; width: 480px; height: 256px; padding-left: 16px; padding-right: 16px; padding-top: 32px; padding-bottom: 16px;}wpink { position: absolute; right: 50%; transform: translateX(-32px); width: 352px; height: 256px; background: #F48FB1; padding-left: 32px; padding-right: 16px; padding-top: 24px; padding-bottom: 16px;}&lt;/style&gt; absolute relative static 설명 https://velog.io/@rimu/css-요소의-위치position-정리 1234567891011121314151617181920212223&lt;style&gt;@font-face{ font-family: 'KintexL'; /* 고양일산체 L */ src: url('./fonts/KintexL/GoyangIlsan_L.woff2') format(‘woff2’), url('./fonts/KintexL/GoyangIlsan_L.ttf') format('truetype'), url('./fonts/KintexL/GoyangIlsan_L.woff') format(‘woff’), url('./fonts/KintexR/GoyangIlsan_L.eot?#iefix') format('embedded-opentype');}@font-face{ font-family: 'KintexR'; /* 고양일산체 R */ src: url('./fonts/KintexR/GoyangIlsanR-Regular.woff2') format(‘woff2’), url('./fonts/KintexR/GoyangIlsanR-Regular.ttf') format('truetype'), url('./fonts/KintexR/GoyangIlsanR-Regular.woff') format(‘woff’), url('./fonts/KintexR/GoyangIlsanR-Regular.eot?#iefix') format('embedded-opentype');}body { font-family: 'KintexL', 'KintexR', Arial, Helvetica, sans-serif; /* 고양일산체 적용 */ background-color: #FCE4EC;}&lt;/style&gt; WOFF(World Open Font Format)란 웹 상에서 가장 보편적으로 사용되는 폰트 포맷이다. Chrome이나 Safari 등 주요 브라우저에서 지원하며, 사실상의 표준으로 자리잡았다. 자세한 내용은 위키백과나 다른 블로그에서 찾을 수 있다. 고양일산체는 웹과 모바일을 포함한 다양한 매체에 자유롭게 사용이 가능한 폰트이다. 필자가 개인적으로 좋아하는 폰트라서 이번 CV 페이지 작업에 사용하기로 하였다. 고양일산체는 공식적으로는 WOFF 파일을 제공하지 않기 때문에 파일 변환 과정을 거쳐 사용하게 되었다. 그런데 문제가 하나 있었다. 어째서인지 Chrome 브라우저에서는 변경한 폰트가 적용되지 않는 것이었다. 반면 Safari 브라우저에서는 변경한 폰트가 정상적으로 적용되었다. 아직 그 이유를 찾아내지는 못 했으나 만약 해결하게 된다면 새로운 포스트에 해결 방법을 적어두도록 하겠다. 1234567891011121314151617181920212223242526&lt;style&gt;btn_github { position: absolute; top: 388px; right: 50%; transform: translateX(-288px); width: 96px; height: 96px; background: #e91e63; padding: 16px; display: block;} /* 버튼 영역 */btn_github &gt; img { position: absolute; width: 100%; top: 50%; left: 50%; transform: translate(-50%, -50%);} /* 버튼 내 아이콘 이미지 */btn_github &gt; span { position: absolute; top: 120%; left: 50%; width: 96px; height: 24px; transform: translate(-50%, -50%); text-align: center;} /* 버튼 아래 글씨 */&lt;/style&gt; translate 설명 2부에서 계속","link":"/2022/09/21/cv-page-writing-1/"},{"title":"초등학생 때 만든 게임들을 리마스터해 보았다","text":"초등학생 때 필자는 친구와 함께 GameMaker™ 8.0을 이용해 허접한 자작 게임을 만들곤 하였다. 개발 관련 지식은 당연히 전무했지만, 블록코딩 위주로 이루어진 툴이었기에 입문용으로는 제격이었다. 그렇게 서로 자신이 만든 게임을 공유하며 놀려고 초딩들의 컴퓨터 도전기라는 카페를 만들었다. 한때 회원수 600명을 웃돌 정도로 성장했지만, 우리가 중학생이 된 이후로는 점차 관리가 소홀해졌다. (이름값 하는 카페…?) 아무튼 당시에는 정말로 순수한 흥미와 열정으로 개발을 하곤 하였다. 그 무렵부터 ‘프로그래머’가 되겠다는 필자의 꿈이 태동했다고 생각한다. 당시에는 전혀 몰랐지만, 그 시절의 컴퓨터공학과는 비인기학과였고 개발자는 기피 직업 중 하나였다고 한다. 그로부터 불과 몇 년 사이에 세상은 변해 컴퓨터공학과의 입결은 하늘을 찌르고, 개발자는 유망 직종이 되었으며, 어디서든 쉽게 개발자 커뮤니티를 찾을 수 있게 되었다. 이런 이야기를 갑자기 왜 꺼내게 되었냐 하면, 얼마 전에 필자가 과거에 만들었던 자작 게임들 중 그나마 봐 줄 만한 것들을 추려서 필자의 GitHub에 업로드하면서 과거를 회상하게 되었기 때문이다. 당시에는 나름 괜찮게 만들었다고 생각한 게임이, 성장하고 나서 지금의 시점에서 다시 보니 모든 것이 허술하고 버그투성이였다. 그림판으로 끄적인 듯한 스프라이트며 의도한 대로 작동하지 않는 오브젝트며…. 그럼에도 어찌저찌 돌아가는 게임을 플레이하며 추억에 잠겨있던 중 문득 어떤 생각이 들었다. 지금의 나라면 이 게임들의 완성도를 더 높일 수 있지 않을까? 그렇게 무작정 미완성 게임이나 버그가 많은 게임들을 붙잡고 뜯어고쳐보기로 했다. 일명 ‘리마스터’. 리마스터라고는 해도 외견은 거의 그대로 유지시킨 채 버그를 잡고 부족해 보이는 점들을 보완하는 것뿐이다. 정신적으로 힘든 상황에서 점점 꺼져만 가는 개발에 대한 열정의 불씨…. 그렇지만 이대로 아무 것도 하지 않는 것보다는 비록 보잘것없더라도 뭐라도 할 수 있는 걸 해 보자는 생각에서였다. 「터치터치」 리마스터 첫 리마스터 작품으로 고른 것은 필자가 2011년 2월에 개발한 터치터치라는 게임이다. 마우스나 터치패드를 이용하여 커서를 움직여 랜덤하게 출몰하는 빨간 버튼을 재빨리 눌러 없애야 하는 게임이다. 두더지잡기 놀이에서 영감을 얻어 만들었던 이 게임은 낮은 그래픽 퀄리티는 둘째로 치더라도 당시의 미숙했던 구현 능력으로 인한 많은 버그를 안고 있었다. 빨간 버튼은 1.5초 안에 누르기만 하면 되는데, 간혹 1.5초가 지나지 않았는데도 게임 오버가 되기도 했다. 심지어는 실수로 지뢰 버튼을 눌렀을 때 100코인을 지불하지 못 하면 게임 오버가 되는데, 코인이 부족해도 그냥 게임이 진행되기도 했다. 이외에도 자잘한 버그들과 필요없는 기능들이 들어있었다. 우선 창 크기는 마우스나 터치패드로 버튼을 찾아 누르기 용이하도록 기존의 작은 창 크기를 유지하기로 했다. 다소 유치하고 초라해 보이는 스프라이트들 역시 나름 그 시절의 열정과 추억이 담겨있는 것들이기에 수정은 최소한으로 하고, 가능한 한 기존의 것을 그대로 유지하기로 했다. 대신 버그 수정이나 시스템의 체계화 등 게임의 기능적인 부분을 다듬는 데에 치중하기로 했다. 단순한 구조의 게임이었기에 3시간여 만에 완성할 수 있었다. 보다 자세한 내용은 필자의 GitHub에서 확인할 수 있다. 게임 개발 파일과 exe 파일도 다운로드 가능하다. 「클라우드 어드벤처」 리마스터 두 번째로 고른 것은 필자가 2011년 9월에 개발한 클라우드 어드벤처라는 게임이다. 맵 안에 있는 별을 모두 먹은 다음, 구름 블럭을 밟고 꼭대기로 올라가면 되는 게임이다. 이 게임 역시 너무나도 많은 버그를 가지고 있었지만…. 게임을 진행하는 것 자체에는 큰 문제가 없었다. 의도와는 다르게 작동하는 게임 속 구름 블록들, 그러나 그런 엉망진창인 블록들을 이용해서 게임을 클리어해내고 마는 플레이어. 이것이야말로 ‘버그가 아니라 기능입니다 :)’ 의 표본 아닐까? 그럼에도 필자는 본디 의도했던대로 게임이 진행되는 모습을 보고 싶었다. 그렇게 며칠 동안 조금씩 버그를 고쳐 나갔다. 그러면서 과거의 자신이 왜 이런 기초적인 문제들을 해결하지 못 했는지 의문이 들었다. 이에 대해 필자는 개발에 대해 문외한이었던 어린 시기에 블록코딩(게임메이커)으로 코딩에 입문했고, 그 이외의 다른 기초지식을 배우지 못 했기 때문이라고 생각했다. 기본적인 컴퓨터 언어의 문법과 실행 원리만 파악하고 있었어도 그런 식으로 코드를 짜지 않았을 터이다. 어찌 됐든, 지금은 그 때보다는 성장했으니 그걸로 된 것 아닐까. 보다 자세한 내용은 필자의 GitHub에서 확인할 수 있다. 게임 개발 파일과 exe 파일도 다운로드 가능하다. 개발 환경 필자는 기존에 개발했던 게임들을 앞으로도 몇 개 더 리마스터할 생각이다. 위의 게임들은 모두 GameMaker™ 8.0 (.gmk 확장자), 그러니까 구 버전 게임메이커로 개발한 것이다. 비록 지금은 해당 버전은 사후 지원이 끊긴 지 오래이지만, 리마스터링 또한 해당 툴로 진행하고 있다. YoYo Games는 2012년에 기존의 게임메이커를 리뉴얼한 GameMaker: Studio™ (.gmx 확장자)를 출시했고, 이어서 2017년에는 GameMaker™ Studio 2 (.yyp 확장자)를 출시했다. 각자 다른 확장자를 가지고 있기도 하고, 소스 파일 변환 과정을 거치지 않는 한 이들은 서로 호환되지 않는다. .gmk 파일을 .gmx 파일로, 혹은 .gmx 파일을 .yyp 파일로 변환하는 것은 비록 완벽하지는 않지만 공식 기능으로서 지원된다. 그러나 .gmk 파일을 .yyp 파일로 직접 변환하는 것은 불가능하다. 그럼 .gmk 파일을 .gmx 파일로 변환한 다음 그것을 다시 .yyp 파일로 변환하면 되는 것 아니냐고 생각할 수도 있지만, 두 번의 변환을 거친 파일의 품질을 보장할 수 없을 뿐더러, 10년도 더 전에 작성한 스파게티 코드로 점철된 소스 파일을 갈아엎어야 하는 것은 매한가지이다. 애초에 기존 작품들의 소스 파일이 GameMaker™ 8.0, 그러니까 구 버전 게임메이커에서 쓰여졌고, 필자에게도 아직은 구 버전이 더 익숙하기 때문에 리마스터 작업은 앞서 말했듯 구 버전 게임메이커로 진행하기로 했다. 앞으로의 계획 무릇 소프트웨어 엔지니어를 꿈꾸는 자는 끊임없이 도전하고 항상 새로운 것을 배워야 하기 마련이다. 그러나 필자는 그렇게 하지 못 하고 있다. 아니, 안 하고 있다. 어릴 적 만져본 게임메이커, 대학교 교양 강의 수준에 머물러 있는 C언어와 Python 지식, 반 년 정도 하다가 때려친 Android 앱 개발 정도가 지금의 필자가 가진 지식의 전부이다. 이래서야 앞으로 전공을 살려 일하는 건 무리다. 배우려는 의지가 없는 사람이 무슨 발전이 있겠는가. 다른 사람들이 매일 실력을 갈고 닦고 스펙을 쌓아가는 와중에, 필자는 또 엉뚱한 계획을 세운다. 바로 GameMaker™ Studio 2를 이용하여 Windows 환경과 macOS 환경에서 모두 구동되는 횡스크롤 RPG 게임을 개발하는 것이다. 연내에 베타 버전을 완성시키는 것이 목표이다. 사실 이것은 10여 년 전 중학생이었던 필자의 꿈이기도 했다. 마침 휴학도 했겠다 남아도는 것이 시간이니 지금이야말로 이 목표를 이루기에 적기가 아닐까. 아무리 지금의 ‘나’가 못났다 해도 10여 년 전의 ‘나’보다는 많이 성장했다고 생각한다. 글은 이 쯤에서 마무리. 조만간 새로운 포스팅에서 만납시다.","link":"/2022/09/19/gamemaker-works-remaster-1/"},{"title":"개발자를 꿈꾸는 에드의 이야기","text":"지난 9월 22일부터 기획에 돌입해 개발 한 달 차를 맞이한 필자의 2차 창작 인디 게임 《퇴마묵시록: 돌아온 퇴마사》 (이하 ‘퇴마묵시록’) 에는 생각보다 많은 이야기가 얽혀있다. 필자가 개발을 그만둔 계기이자 다시금 개발을 시작하게 해 준 계기이기도 한 모순적인 프로젝트. 퇴마묵시록에 얽힌 이야기를 온전히 다 풀어내려면 필자가 처음 개발을 접한 시점에서부터 이야기를 시작해야 한다. 그만큼 필자에게 있어서 중요한 의미를 가지는 프로젝트이다. 2009년, ‘초딩’ 에드의 도전 2009년 무렵, 필자는 친구와 함께 파워포인트를 이용하여 단순한 게임을 만드는 것을 즐기곤 하였다. 파워포인트에서 다음 슬라이드로 넘어가는 단축키가 ①스페이스 바, ②엔터 키, ③N키, ④오른쪽 방향키, ⑤아래쪽 방향키, ⑥Page Down 키 등으로 다양하다는 점과, 숫자 + 엔터 키를 누르거나 도형에 링크를 걸어두면 특정 슬라이드로 이동 가능하다는 점 등을 활용하여, 진행 루트가 제한적인 RPG 게임(?)을 몇 개 만들기도 하였다. 마우스 커서가 특정 도형에 닿으면 다른 슬라이드로 이동하게 하는 기능을 응용한 마우스피하기도 당연히 만들어본 경험이 있다. 당시에 이러한 파일들을 서로 공유하며 놀기 위해 2009년 7월 29일에 초딩들의 컴퓨터 도전기, 줄여서 초컴도라는 네이버 카페를 개설하게 된다. 카페 매니저는 한 명만 할 수 있어서 친구가 매니저를 맡고 내가 부매니저를 맡기로 하였다. (비록 지금은 유령 카페로 전락하고 말았지만, 한때 이 카페는 멤버 수 600명을 돌파하는 기염을 토하기도 했다.) 그러던 어느 날, 그 친구의 소개로 GameMaker™ 8.0을 접하게 되었다. (2010년 7~8월 무렵이다.) 코딩이라는 단어가 무엇인지조차 모르던, 당시 초등학교 저학년이던 필자에게는 다루기 힘든 도구였다. 하지만 CrazyGM, PlayGM 등 국내 게임메이커 커뮤니티들을 들락날락하며 도움을 받아가며 어설프게나마 어찌저찌 게임을 하나둘 만들어나가기 시작했다. 그리고 그렇게 만든 게임을 초컴도에 업로드하여 다른 사람들과 공유하곤 하였다. 이에 대한 좀 더 자세한 내용은 이 블로그에 있는 다른 포스팅에 기록해두었다. → (초등학생 때 만든 게임들을 리마스터해 보았다) ‘우매함의 봉우리’에 오르다 대부분의 새내기 개발자들이 그러하듯, 코딩 좀 할 줄 알게 됐다고 기고만장해 있던 필자는 흑역사를 만들고 만다. 당시 다른 또래들과 달리 게임을 하는 것에 큰 흥미가 없었던 필자가 거의 유일하게 플레이하던 게임이 있었으니, 바로 한자 학습 MMORPG 한자마루이다. 그러나 2012년, 한자마루는 퍼블리싱 주체인 나우콤 게임사업본부가 사업 철수 수순을 밟기 시작하면서 결국 서비스를 종료하게 된다. 그것이 너무나 아쉬웠던 필자는 2013년 8월, 한자마루를 부활(?)시키겠다는 생각으로 한자마루3(가칭) 프로젝트를 시작하고 이를 한자마루 커뮤니티에 발표하게 된다. (♪그런 짓은 하지 말아야 했는데~♫) 이후 게임의 정식 명칭이 퇴마묵시록으로 결정되고, 제대로 된 기획 단계도 거치치 않은 채 무작정 부딪히는 식으로 개발을 시작했다. 지금 생각하면 당연한 결과이지만, 애초에 프로그래밍을 제대로 공부해 본 적도 없는 사람이 전문 개발 인력들이 만든 MMORPG를 흉내낼 수 있을 리가 없었다. 게임에 들어갈 일러스트나 스킬 효과 등을 어떻게 그려내는가 하는 것도 문제였다. 당시에는 디지털 일러스트를 그려본 경험이 없었고 그러한 것들은 나의 영역 밖에 있는 것이라고 생각했었다. 그저 평범한 학생이었기에 팀을 꾸리거나 외주를 맡기는 것도 어려웠다. 무엇보다 게임메이커는 GML(GameMaker™ Language)이라는 자체 언어를 다룰 줄 알아야 구현의 자유도가 높아지는데, 필자는 GML에서 자주 쓰이는 일부 코드들을 블록 형태로 시각화한 ‘비주얼 모드’로 단순한 게임밖에 만들어본 적이 없었다. 게다가 당시의 학업 성적도 떨어지고 있었기에 학업 이외의 것들은 잠시 접어두기로 했다. 결국 몇 달 만에 개발을 중단했고, 필자의 발표에 기대하고 있던 한자마루 팬덤에 크나큰 실망감만을 남기고 말았다. 비슷한 시기에 C언어와 안드로이드 앱 개발 등의 공부를 시작했었지만 이조차도 흐지부지되었다. 중학교 3학년 때에는 교내에 프로그래밍 동아리를 새로 만들어서 다시 무언가를 시작해보려 했지만 이렇다할 수확은 얻지 못했고, 이후 기숙형 고등학교에 진학하여 3년 동안 외부와 단절된 생활을 하게 되면서 꿈은 점점 희미해져만 갔다. 2019년, 에드의 ‘터닝 포인트’ 수능이 끝난 이후 다시 C언어와 안드로이드 앱 개발(Java)을 공부하기 시작했다. C언어는 독학으로 익히고 대학에서 교양 수업도 들었다. 안드로이드 앱 개발은 집 근처의 한 스타트업 사무실에서 6개월 정도 가르침을 받았다. 하지만 딱 거기까지였다. 입시에 실패하여 원치 않는 학교의 원치 않는 학과에 진학했던 필자는 1학년 여름방학 때 삶의 터닝 포인트를 만나게 된다. 서울의 다른 대학생들과 현직자 분들을 만나뵐 기회가 몇 번 있었다. 그러다 S대의 알고리즘 학회 세미나에 다녀온 날, 학창 시절 동안 줄곧 동경해오던 분을 만나뵈었던 바로 그 날, 문득 그동안의 자신이 우물 안 개구리였다는 사실을 깨닫고 만다. 그리고 마음 속 깊이 묻어둔 오랜 바람이었던 ‘서울 라이프’에 대한 열망에 불씨를 지피게 된다. 당해 11월, 그렇게 수도권 대학의 컴퓨터공학과 진학을 목표로 다시 1년 여 간의 수험생활을 시작하게 됐다. 코로나19 사태까지 겹치면서 너무나 괴로운 시간이었다. 우울증이 악화되었고 공황 장애까지 찾아왔다. 여름 즈음부터는 공부를 거의 놓다시피했다. 그러한 상태로 몇 달의 시간이 흘렀고, 목표를 이루지 못 할 것이라고 필자는 확신하고 있었다. 아예 체념한 상태로 ‘꼭 대학 진학을 명분으로 삼지 않더라도 수도권으로는 갈 수 있다’는 생각에 수원에서 고시원이나 월셋방을 구해 모 프랜차이즈 매장에서 일하며 경제적으로 독립하겠다는 계획까지 세워두었다. 그래서인지 수능 당일 아침에는 오히려 홀가분한 기분이 들었다. 해탈한 마음으로 묵묵히 문제지를 풀어나갔고, 마침내 두 번째 수능이 끝났다. 집에 돌아와 가채점을 해 보았을 때에는 깜짝 놀랐다. 필자의 성적이 수도권 소재 중하위권 대학에 진학할 수준은 되었던 것이다. 당연히 목표한 바에 비해서는 낮은 성적이었지만, 그래도 수도권 대학에 진학할 수 있다는 게 어디인가. 고민 끝에 현재 재학 중인 대학/학과에 지원했고, 추가합격 전화를 받아 등록했다. 추측컨데 시기적으로 학령 인구 감소 등의 영향이 있어 운이 좋았다고 필자는 생각하고 있다. 여담이지만, 현재 재학 중인 대학은 필자가 고등학교 3학년 당시에 수시로 지원하여 1차 합격하였다가 면접에서 탈락한 바로 그 대학이다. 어쩌면 결국은 이 대학에 올 운명이었는지도 모르겠다. ‘절망의 계곡’에 빠지다 위의 이미지는 필자가 자신의 전공 지식에 대해 느낀 바를 그래프로 나타낸 것이다. 자신의 능력을 과소평가하거나 과대평가하는, 소위 더닝-크루거 효과로 알려진 곡선이다. 뭐든지 할 수 있을 것만 같았던 열정 넘치던 초등학생 시절, 한계에 부딪혀 좌절한 중학생 시절, 학업에 열중하느라 꿈을 잊고 지낸 고등학생 시절, 원치 않는 학교/학과에서 고군분투하던 전적대 재학 시절, 인생에서 가장 암울했던 N수생 시절, …. … 그리고 다시, 대학생이 되었다. 이번에는 원하던 학교의 원하는 학과에서 말이다. 수도권에서의 대학 생활은 지방 대학에서보다 훨씬 힘들었다. 우선 커리큘럼의 밀도에서부터 차이가 났다. 이제 겨우 1학년인데도 강의 진도를 따라가는 것이 벅찰 정도였다. 기댈 곳 하나 없이 무작정 상경한 탓에 외로움도 많이 느꼈다. 주변 사람들과 자신을 끊임없이 비교하며 쉬운 일조차 제대로 해내지 못하는 자신을 질책했고, 학창 시절 동안 학업을 핑계로 전공 공부를 게을리 하고 허송세월한 것이 후회스럽게 느껴졌다. 상경하고 나면 나아지리라 믿었던 우울증은 쉬이 나아지지 않았고, 오히려 불안 증세가 심해지면서 불면증까지 찾아왔다. 교내 상담 센터를 이용해보았지만 효과를 느끼지 못했기에 결국 정신건강의학과를 찾아 항우울제와 항불안제를 처방받았다. 이러한 상황에서 학점이 잘 나오는 것이 오히려 이상할 것이다. 1-1학기는 어찌저찌 넘겼지만, 1-2학기와 2-1학기에는 국가장학금조차 받지 못 할 정도로 처참한 성적을 받았다. 개인 프로젝트나 대외 활동 같은 것들을 제대로 할 수 있을 리도 없었다. 이대로는 안 되겠다 싶어서 결국 휴학계를 내고 지방으로 내려왔다. 그리고, 지금, 2022년 가을 지방으로 내려온 이후 약 2개월 동안 요양에만 집중했다. 그러던 9월 12일, 추석 대체공휴일이었던 그 날, 문득 어릴 적 만들었던 게임들이 생각났다. 언젠가 깃허브에 정리해둬야겠다고 생각만 하고 행동으로 옮기지 않았었는데, 이참에 남아있는 파일들만이라도 일단 정리해서 업로드해놓기로 했다. 추억을 되새길 겸 소스 파일을 하나하나 열어보고 직접 플레이도 해 보았다. 그런데 10년이 훌쩍 지난 지금에 와서 보니 게임들의 완성도가 너무 낮고 버그가 잦았다. 어릴 적의 나는 고치지 못 했지만 지금의 나라면 충분히 고칠 수 있는 부분들이었다. 그래서 과거에 만든 게임들에 대해서 차례대로 리마스터링 작업을 하기로 했다. 앞서 언급했듯이, 이에 대한 자세한 내용은 이 블로그에 있는 다른 포스팅에 기록해두었다. → (초등학생 때 만든 게임들을 리마스터해 보았다) 그러던 중 미완성작인 채로 남아있던 ‘다크티아’라는 게임이 눈에 들어왔다. (사실 ‘다크피아’가 올바른 표기이다. 원작인 로보티아가 Robotic과 Utopia의 합성어이기 때문이다.) 국내 게임메이커 커뮤니티인 CrazyGM(현 KGMC)의 ‘폭풍’님께서 개발하신 로보티아라는 RPG를 모방한 습작으로, ‘폭풍’님께서 공개하신 소스 파일을 토대로 게임메이커를 좀 더 적극적으로 활용하는 방법을 배우기 위해 만들던 게임이다. 비록 습작이긴 하지만, 아예 처음부터 다시 기획해서 멋진 작품으로 되살려보자는 생각을 했다. 그렇게 9월 15일부터 기획에 들어갔는데…. … 앞서 언급했듯이 필자는 어릴 적부터 게임을 그리 즐겨하는 편이 아니었다. 기업에서 정식으로 퍼블리싱한 RPG 장르에 한하여, 깊이 있게 플레이해 본 것은 한자마루와 Z9별 정도였다. 그러니 자연스럽게 특정 게임의 영향을 많이 받을 수밖에 없는 것이었다. 기획안 역시 그러한 게임들과 비슷한 느낌으로 나왔다. 때마침 떠오른 것이 과거 개발을 포기했던 퇴마묵시록이었다. 아무리 필자가 노력하지 않고 발전이 없는 사람이라지만 9년 여의 세월이 흘렀다. 이제는 이 정도 게임은 충분한 시간만 들이면 얼마든지 혼자서 만들 수 있다. 어릴 적에는 미지의 영역이었던 GML도 지금 와서 보니 여느 프로그래밍 언어와 문법이 크게 다르지 않았고, 다양한 자체 함수를 이용할 수 있기에 오히려 블록코딩보다 더 자유롭고 편하게 느껴졌다. 일러스트는 아이패드로 직접 그리기로 했고, 사운드는 저작권자의 허가에 따라 가져다 사용하기로 했다. 9월 22일, 기존의 기획안을 갈아엎고 이렇게 해서 한자마루의 세계관을 빌려 그것에 이야기를 덧붙인 2차 창작 게임으로서 방향이 정해졌다. 그 날부터 지금까지 하루도 거르지 않고 게임 개발에 전념하고 있다. 그날그날의 개발 진척 상황을 game.edward.moe에 수시로 기록하고 있다. (※ 해당 링크는 아직 완성되지 않은 게임의 개발 과정을 담고 있습니다. 스포일러를 원치 않으시는 분들은 주의해주세요!) 이상으로 이야기를 마칩니다. 긴 글 읽어주셔서 감사합니다.","link":"/2022/10/18/pjexodus-history/"},{"title":"내가 해냄","text":"이걸 해냄감사해요 하루님!!!","link":"/2021/12/11/%EB%82%B4%EA%B0%80-%ED%95%B4%EB%83%84/"},{"title":"스택, 큐, 덱 (BOJ 10828&#x2F;10845&#x2F;10866)","text":"10828. 스택스택이란 쌓는다는 의미로, 선입후출의 원칙이 적용되는 자료구조이다.스택 라이브러리 &lt;stack&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. stack&lt;자료형&gt; s → ‘s’라는 이름의 해당 자료형의 스택을 선언함 s.push(a) → 스택 s에 a를 밀어넣음 (단, a는 스택 s와 같은 자료형이어야 함) s.pop() → 스택 s의 맨 위에 있는 요소를 꺼냄 s.top() → 스택 s의 맨 위에 있는 요소를 불러옴 s.size() → 스택 s의 크기를 불러옴 (비어있을 경우 0) s.empty() → 스택 s가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_10828 (2022. 11. 10. 풀이)1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;stack&gt;#include &lt;string&gt;using namespace std;stack&lt;int&gt; s; // 's'라는 이름의 int 자료형의 스택을 선언함string a[100001];int main() { int n, k; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a[i]; if (a[i] == &quot;push&quot;) { cin &gt;&gt; k; s.push(k); // 스택 s에 정수 k를 밀어넣음 } else if (a[i] == &quot;pop&quot;) { // 만약 스택 s가 비어있다면, -1을 출력함 if (s.empty() == true) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 스택 s가 비어있지 않다면, else { cout &lt;&lt; s.top() &lt;&lt; &quot;\\n&quot;; // 스택 s의 맨 위에 있는 요소를 불러와 출력함 s.pop(); // 스택 s의 맨 위에 있는 요소를 꺼냄 } } else if (a[i] == &quot;top&quot;) { // 만약 스택 s가 비어있다면, -1을 출력함 if (s.empty() == true) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 스택 s가 비어있지 않다면, 스택 s의 맨 위에 있는 요소를 불러와 출력함 else cout &lt;&lt; s.top() &lt;&lt; &quot;\\n&quot;; } else if (a[i] == &quot;size&quot;) cout &lt;&lt; s.size() &lt;&lt; &quot;\\n&quot;; // 스택 s의 크기를 출력함 else if (a[i] == &quot;empty&quot;) { if (s.empty() == true) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;} 10845. 큐 큐는 일렬로 늘어선 모양새를 뜻하며, 선입선출의 원칙이 적용되는 자료구조이다.큐 라이브러리 &lt;queue&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. queue&lt;자료형&gt; q → ‘q’라는 이름의 해당 자료형의 큐를 선언함 q.push(a) → 큐 q에 a를 밀어넣음 (단, a는 큐 q와 같은 자료형이어야 함) q.pop() → 큐 q의 맨 앞에 있는(가장 먼저 들어간) 요소를 꺼냄 q.front() → 큐 q의 맨 앞에 있는(가장 먼저 들어간) 요소를 불러옴 q.back() → 큐 q의 맨 뒤에 있는(가장 나중에 들어간) 요소를 불러옴 q.size() → 큐 q의 크기를 불러옴 (비어있을 경우 0) q.empty() → 큐 q가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) boj_10845 (2022. 11. 10. 풀이)12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;queue&gt;using namespace std;string a;queue&lt;int&gt; q;int main() { int n, k; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a; if (a == &quot;push&quot;) { cin &gt;&gt; k; q.push(k); // 큐 q에 정수 k를 밀어넣음 } else if (a == &quot;pop&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, else { cout &lt;&lt; q.front() &lt;&lt; &quot;\\n&quot;; // 큐 q의 맨 앞에 있는 요소를 불러와 출력함 q.pop(); // 큐 q의 맨 앞에 있는 요소를 꺼냄 } } else if (a == &quot;front&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, 큐 q의 맨 앞에 있는 요소를 불러와 출력함 else cout &lt;&lt; q.front() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;back&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, 큐 q의 맨 뒤에 있는 요소를 불러와 출력함 else cout &lt;&lt; q.back() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;size&quot;) cout &lt;&lt; q.size() &lt;&lt; &quot;\\n&quot;; // 큐 q의 크기를 출력함 else if (a == &quot;empty&quot;) { if (q.empty()) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;} 10866. 덱 덱이란 double-ended queue의 줄임말로, 양방향에서 요소를 삽입하고 삭제할 수 있는 자료구조이다.덱 라이브러리 &lt;deque&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. deque&lt;자료형&gt; dq → ‘dq’라는 이름의 해당 자료형의 덱을 선언함 dq.push_front(a) → 덱 dq의 맨 앞에에 a를 밀어넣음 (단, a는 덱 dq와 같은 자료형이어야 함) dq.push_back(a) → 덱 dq의 맨 뒤에 a를 밀어넣음 (단, a는 덱 dq와 같은 자료형이어야 함) dq.pop_front() → 덱 dq의 맨 앞에 있는 요소를 꺼냄 dq.pop_back() → 덱 dq의 맨 뒤에 있는 요소를 꺼냄 dq.front() → 덱 dq의 맨 앞에 있는(가장 먼저 들어간) 요소를 불러옴 dq.back() → 덱 dq의 맨 뒤에 있는(가장 나중에 들어간) 요소를 불러옴 dq.size() → 덱 dq의 크기를 불러옴 (비어있을 경우 0) dq.empty() → 덱 dq가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) 그런데, BOJ 10866번 문제에서는 size() 함수를 사용하면 시간 초과가 뜬다. 이는 size() 연산의 처리 방식과 관련이 있는데, size() 연산은 실행할 때마다 해당 자료구조의 처음부터 끝까지 전부 훑고 지나가기 때문이다. 따라서 다음과 같은 형태의 풀이가 요구된다. boj_10866 (2022. 11. 10. 풀이)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;deque&gt;using namespace std;string a;deque&lt;int&gt; dq;int main() { int n, k; int size = 0; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a; if (a == &quot;push_front&quot;) { cin &gt;&gt; k; dq.push_front(k); size++; } else if (a == &quot;push_back&quot;) { cin &gt;&gt; k; dq.push_back(k); size++; } else if (a == &quot;pop_front&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else { cout &lt;&lt; dq.front() &lt;&lt; &quot;\\n&quot;; dq.pop_front(); size--; } } else if (a == &quot;pop_back&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else { cout &lt;&lt; dq.back() &lt;&lt; &quot;\\n&quot;; dq.pop_back(); size--; } } else if (a == &quot;front&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; dq.front() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;back&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; dq.back() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;size&quot;) cout &lt;&lt; size &lt;&lt; &quot;\\n&quot;; else if (a == &quot;empty&quot;) { if (dq.empty()) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;}","link":"/2022/11/29/boj-10828-10845-10866/"},{"title":"C++ 벡터(vector) 사용법 (BOJ 2822&#x2F;5635&#x2F;14769)","text":"vector 컨테이너에 대하여 C++의 표준 라이브러리에 내장된 컨테이너의 일종이다. 들어오는 값의 개수에 따라 유동적으로 메모리를 할당하며, 미리 크기를 정해둘 수도 있다. 그래서 사용하기에 편리하지만, 배열에 비해 처리 속도는 느린 편이라고 한다. vector&lt;자료형&gt; v; → 해당 자료형의 값을 담을 수 있는 크기가 유동적인 벡터 v를 선언한다. vector&lt;자료형&gt; v[n]; → 해당 자료형의 값을 담을 수 있는 크기가 n인 벡터 v를 선언한다. (n은 정수) v.push_back(a) → 요소 a를 벡터 v의 맨 뒤에 삽입한다. v.pop_back() → 벡터 v의 맨 뒤에 있는 요소를 제거한다. v.begin() → 벡터 v의 맨 앞에 있는 요소 v.end() → 벡터 v의 맨 뒤에 있는 요소의 바로 뒤 sort(v.begin(), v.end()); → 벡터 v를 오름차순으로 정렬한다. 알고리즘 문제를 풀다 보면 pair 컨테이너와 함께 쓰이는 경우가 종종 있다. vector &lt;pair&lt;자료형1, 자료형2&gt;&gt; v; → 자료형1과 자료형2에 해당하는 값을 담을 수 있는 페어로 구성된 크기가 유동적인 벡터 v를 선언한다. v.push_back(pair&lt;자료형1, 자료형2&gt;(a, b)); → 자료형1에 해당하는 값 a와 자료형2에 대항하는 값 b를 담은 페어를 벡터 v의 맨 뒤에 삽입한다. v.pop_back(); → 벡터 v의 맨 뒤에 있는 요소(페어)를 제거한다. v.clear(); → 벡터 내의 모든 요소들을 제거한다. v[i].first → 벡터의 i번째 페어에 들어있는 요소들 중 앞에 있는 요소를 참조한다. v[i].second → 벡터의 i번째 페어에 들어있는 요소들 중 뒤에 있는 요소를 참조한다. sort(v.begin(), v.end()); → 페어로 구성된 경우, 페어의 앞에 있는 요소를 기준으로 벡터 v를 오름차순으로 정렬한다. 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_2822 (2022. 11. 29. 풀이)1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;vector &lt;pair&lt;int, int&gt;&gt; v;vector &lt;pair&lt;int, int&gt;&gt; v2;int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, sum = 0; for (int i=0; i&lt;8; i++) { cin &gt;&gt; n; v.push_back(pair&lt;int, int&gt;(n, i+1)); } sort(v.begin(), v.end(), greater&lt;&gt;()); for (int i=0; i&lt;5; i++) { sum += v[i].first; v2.push_back(pair&lt;int, int&gt;(v[i].second, v[i].first)); } cout &lt;&lt; sum &lt;&lt; &quot;\\n&quot;; sort(v2.begin(), v2.end()); for (int i=0; i&lt;5; i++) { cout &lt;&lt; v2[i].first &lt;&lt; &quot; &quot;; }} boj_5635 (2022. 12. 1. 풀이)1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;vector &lt;pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; &gt; v;string s;int cmp(pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; a, pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; b) { if (a.second.second != b.second.second) return a.second.second &gt; b.second.second; else { if (a.second.first != b.second.first) return a.second.first &gt; b.second.first; else return a.first.second &gt; b.first.second; }}int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, d, m, y; cin &gt;&gt; n; for (int i=0; i&lt;n; i++) { cin &gt;&gt; s &gt;&gt; d &gt;&gt; m &gt;&gt; y; v.push_back(pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt;(pair&lt;string, int&gt;(s, d), pair&lt;int, int&gt;(m, y))); } sort(v.begin(), v.end(), cmp); cout &lt;&lt; v[0].first.first &lt;&lt; &quot;\\n&quot;; cout &lt;&lt; v[n-1].first.first &lt;&lt; &quot;\\n&quot;;} boj_14769 (2022. 11. 28. 풀이)123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;string a, b;vector &lt;pair&lt;int, string&gt;&gt; v;int main(void) { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, k; cin &gt;&gt; n; for (int i=0; i&lt;n; i++) { cin &gt;&gt; a &gt;&gt; b; if (a[0] &gt;= 48 &amp;&amp; a[0] &lt;= 57) { k = stoi(a); v.push_back(pair&lt;int, string&gt;(k/2,b)); } else { k = stoi(b); v.push_back(pair&lt;int, string&gt;(k,a)); } } sort(v.begin(), v.end()); for (int i=0; i&lt;n; i++) { cout &lt;&lt; v[i].second &lt;&lt; &quot;\\n&quot;; }}","link":"/2022/12/06/boj-2822-5635-14769/"},{"title":"C++ 맵(map) 사용법 (BOJ 17219)","text":"map 컨테이너에 대하여벡터(vector)와 마찬가지로 C++의 표준 라이브러리에 내장된 컨테이너의 일종이다. key와 value라는 값이 페어(pair)로서 한 쌍을 이루는 것이 특징이며, key 값은 중복을 허용하지 않는다. 값을 저장할 때마다 map 내부의 값들은 key를 기준으로 자동으로 오름차순 정렬된다. 자료구조는 레드 블랙 트리(이진 탐색 트리)로 구현되어 있어, 최고 O(log N)의 시간 복잡도를 지닌다고 한다. (트리에 대한 자세한 내용은 추후에 다른 포스팅에서 다루어보려 한다.) map &lt;자료형1, 자료형2&gt; m1; → 자료형1에 해당하는 key 값과 자료형2에 해당하는 value 값을 저장할 수 있는 맵 m1을 선언한다. m1.insert({key값, value값}); → 페어 {key값, value값}을 맵 m1에 저장한다. (이 때, 해당 페어는 맵 m1에 자동으로 오름차순 정렬되어 저장된다.) m1.begin() → 맵 m1의 맨 앞에 있는 요소 m1.end() → 맵 m1의 맨 뒤에 있는 요소의 바로 뒤 m1.erase(key값); → 해당 key 값에 해당하는 페어를 맵 m1에서 찾아 삭제한다. m1.erase(위치); → 해당 위치에 있는 페어를 맵 m1에서 삭제한다. (이 때, 특정 위치는 m.begin()+n (n은 정수), 특정 범위는 **m.begin(), m.end()**와 같은 형태로 작성한다.) m1.clear(); → 맵 m1의 모든 요소들을 삭제한다. m1.find(key값) → 해당 key 값에 해당하는 페어가 있는지 찾는다. 없으면 m1.end()를 반환한다. m1.find(key값)-&gt;first → 해당 key 값에 해당하는 페어의 key 값 m1.find(key값)-&gt;second → 해당 key 값에 해당하는 페어의 value 값 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_17219 (2022. 12. 13. 풀이)123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;string s, s2;map &lt;string, string&gt; m1;int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, m; cin &gt;&gt; n &gt;&gt; m; cin.ignore(); for (int i=0; i&lt;n; i++) { getline(cin, s, ' '); getline(cin, s2); m1.insert({s, s2}); } for (int i=0; i&lt;m; i++) { cin &gt;&gt; s; cout &lt;&lt; m1.find(s)-&gt;second &lt;&lt; &quot;\\n&quot;; }}","link":"/2022/12/13/boj-17219/"},{"title":"2022년 회고","text":"2022년은 지금껏 내가 살면서 가장 비생산적으로 보낸 한 해였다. 좋게 포장하면 ‘안식년’이었다고 볼 수도 있겠다. 하지만 방구석에 처박혀 지낸 세월을 과연 ‘안식’의 시간으로 봐도 되는지는 잘 모르겠다. 잠깐, 이 글을 더 이어서 적을 필요가 있을까? 회고는 여기서 끝… …이라고 하기에는 그래도 하반기에 벌여놓은 일들이 몇 가지 있기에 가볍게 언급만이라도 하고 마치고자 한다. 휴학, 전진을 위한 일 보 후퇴1-2학기에 1.82라는 충격적인 학점을 받은 이후, 휴학을 고민했었다. 그러나 이런저런 이유로 결국 학업을 강행하게 되었고, 결국 2-1학기 역시 2.62라는 처참한 성적으로 마무리했다. 연속된 국가장학금 지원 자격 탈락에 부모님께서도 이번만큼은 휴학을 납득하실 수밖에 없었다. 휴학과 동시에 수도권에서의 삶을 정리하고 지금은 비수도권으로 내려와 지내고 있다. 일단은 오는 9월에 복학할 예정이다. 퇴마묵시록: 돌아온 퇴마사9월 22일부터 약 한 달 간 진행한 게임 개발 프로젝트이다. 자세한 내용은 여기에서 읽어볼 수 있다. 현재는 잠정 개발 중단 상태이다. 새해가 밝으면 다시 개발을 재개할 생각이다. 가능하면 복학 이전에 어느 정도 완성시켜두고 싶다. 각종 자격증 공부따로 공부하지 않고 지난 수 년 간의 오타쿠 라이프로 쌓인 내공을 바탕으로 지난 12월 4일에 JLPT N1에 응시했다. 합격 여부는 설날이 지나야 발표된다. 추후에 여건이 된다면 JPT 등 다른 자격 시험에도 응시할 생각이 있다. 한편 11월부터는 공인중개사 1차 시험 준비를 시작했다. 오는 10월 말에 치러질 예정인 2023년 34회 제1차시험에 응시할 예정이다. 2022년에 참여한 오프라인 행사 169회 서울 코믹월드 2022 PlayX4 AGF 2022 올해에는 오타쿠 행사에만 얼굴을 비추었다. (…) 그래도 제한적으로나마 오프라인 행사들이 많이 열려서 작년이나 재작년에 비해 숨통이 트이는 한 해였다. 앞으로 개발자로서 더 성장한다면 관련 컨퍼런스 등에도 참석해 보고 싶다.","link":"/2022/12/21/Review-2022/"},{"title":"ARM Mac에서 이클립스 IDE를 실행하는 방법 (JDK 오류)","text":"애플 실리콘이 탑재된 첫 맥북이 세상에 나온 지도 벌써 2년이 넘었다. 갑작스런 변화에도 불구하고 많은 주요 소프트웨어들이 발빠르게 이에 대응하였고, 또 로제타 덕분에 큰 불편 없이 M1 칩이 탑재된 ARM 맥북을 사용하고 있다. 그런데 간혹 애플 실리콘을 지원하지 않는 소프트웨어들을 마주할 때면 곤혹스러움을 경험하게 된다. 이클립스 IDE 또한 그 중 하나였다. 이를 기반으로 한 전자정부 표준프레임워크 역시 당연하게도 마찬가지였다. 그래도 로제타가 있는데, 어떻게든 실행은 시킬 수 있지 않을까? 그래서 일단 설치해 봤다. 위와 같은 에러 메시지가 나타나며 실행이 되지 않는다. 구글링해 본 결과, Stack Overflow에서 해결 방법을 찾을 수 있었다. 우선 Eclipse Temurin에서 mac x64 아키텍처 전용 버전을 설치한다. 그러고 나서, 애플리케이션 폴더에 있는 이클립스(혹은 전자정부 표준프레임워크) 아이콘을 오른쪽 마우스로 클릭한 다음 ‘패키지 내용 보기’를 선택한다. Contents 폴더 안에 Info.plist라는 파일이 있을 것이다. 텍스트 에디터나 VSCode 등으로 해당 파일을 열어보면 &lt;string&gt;-vm&lt;/string&gt;으로 시작하는 코드가 주석 처리되어 있다. 해당 위치에 다음 코드를 붙여넣은 다음 저장해 준다. 1&lt;string&gt;-vm&lt;/string&gt;&lt;string&gt;/Library/Java/JavaVirtualMachines/temurin-19.jdk/Contents/Home/bin/java&lt;/string&gt; 그런 다음 다시 이클립스(혹은 전자정부 표준프레임워크)를 실행해 보면 정상적으로 작동하는 것을 확인할 수 있다. 참고로 현재 맥 전용으로 배포된 이클립스는 인텔 기반 맥을 위해 설계되어 있어서, 애플 실리콘에서 실행 시 로제타를 거쳐 작동하게 된다. 그렇기에 무거운 프로그램 특성 상 속도가 느려져 사용에 불편을 호소하는 개발자들이 많은 것 같다. 시간이 지날수록 애플 실리콘의 비중은 커질 것이므로, 이제는 이클립스도 애플 실리콘 지원을 준비해야 할 때가 아닌가 싶다.","link":"/2023/03/01/eclipse-ide-on-apple-silicon/"},{"title":"가연성 쓰레기의 지난 10년 요약","text":"과거에 대한 에드의 몇 안 되는 기억 조각들을 붙여서 재구성해 보았다. 2013년 에드는 학년 당 학생 수 300여 명의 시골의 한 국립중학교에 수석으로 입학했다. 그러나 남들 앞에 나서기를 극도로 꺼려하는 성격 탓에 입학식 선서를 하는 것을 거절하고 말았다. 주변 어른들로부터 질책 아닌 질책을 받았다. 첫 중간고사에서는 전교 19등으로 떨어졌고, 부모님의 질책은 심해졌다. 급기야 2학기에는 전교 60등 아래로 떨어졌고, 오직 학업에만 집중하라는 부모님의 말씀에 따라 당시 게임메이커로 한창 개발 중이던 퇴마묵시록의 개발을 중단하게 된다. 학년 말에는 전교 부회장 후보로 입후보하였으나 낙선하였다. 2014년 당시 구글 사내의 팀이었던 나이안틱에서 개발한 증강 현실 모바일 게임인 인그레스에 입문했다. 이후 1년 여 동안 학우들과 함께 이 게임을 플레이하러 돌아다녔다. 에드의 인생에서 가장 활발하게 사람을 만나고 다니던 시기였다. 학년 말에는 다시 전교 부회장 후보로 입후보하였으나 마찬가지로 낙선하였고, 에드 대신 입학식 선서를 하였던 학우가 전교 회장으로 당선되었다. 2015년 에드의 전성기라고도 할 수 있는 2015년이다. 애니메이션에 본격적으로 입문하게 된 해이기도 하다. 학생회 소속 전산부로서 활동했다. 쉽게 말해서 학생 선도와 방송부 업무를 병행하는 부서였다. 교내 최초의 프로그래밍 동아리의 창립 멤버로서 동아리 부회장을 역임했다. 해당 동아리에서 스크래치 관련 자격증을 취득했던 걸로 기억하는데, 자격증 이름을 잊어버려서 지금은 찾을 수 없다. 교내 축제와 졸업식에 쓰이는 영상을 전부 혼자서 편집했다. 졸업 직전 학기에는 중간고사와 기말고사 둘 다 전교 14등을 기록했다. 시골의 학교였기에 특목고나 자사고로 진학하는 학생은 없다시피했고, 에드 역시 그런 것에 대한 배경지식이 전무했기에 남들 따라 기숙형 사립 일반고에 진학하기로 결정했다. 2016년 첫 교육청 모의고사에서 전교 13등을 기록했다. 담임과의 첫 대면 상담에서는 의대를 목표로 하고 있다고 말했다. 어릴 적부터 줄곧 컴퓨터공학만을 바라봤던 에드이지만, 당시에는 부모님의 입김으로 인해 진로가 바뀐 상황이었다. 그러나 4월 사설 모의고사에서 성적이 대폭 하락하여 교내 심화반에 들어가지 못하게 됐다. 이후 성적은 우하향 그래프를 그렸고 매 시험마다 정확히 10등씩 떨어져 학기말에는 마침내 전교 100등 바깥으로 밀려나기에 이르렀다. 더 이상 내게 일말의 기대조차 보이지 않던 담임 앞에서 눈물이 터졌던 기억이 난다. 처음으로 부모님께 정신건강의학과에 가고 싶다는 의사를 밝혔지만 이해할 수 없다는 답만 돌아올 뿐이었다. 2017년 학생부종합전형 대비를 위한 소논문 작성 프로그램에 반 강제로 참여하게 됐다. 나보다 훨씬 뛰어난 후배와 2인 1조를 이루어 일 년 내내 논문을 완성시키는 데에 집중했다. 논문 제목은 ‘기계 학습 및 예측 모델 설계에 이용되는 데이터 과학에 관한 탐구’였다. 에드도 이게 무슨 소리인지 하나도 모르겠다. 대부분의 작업은 후배가 다 했다. 아무튼 논문에 집중하느라 2017년에 대한 기억은 이것 뿐이다. 2018년 고3 입시로 바쁜 한 해였다. 처음 써 보는 자기소개서, 처음 써 보는 수시 원서, 모든 것이 처음이었고 정보는 한없이 부족했다. 무지하고 무례한 룸메이트를 상대하느라 지쳐 수능 응시 직전 6개월 여 동안은 면학실 책상 위에 따로 살림을 차리고 지냈다. 덕분에 새벽에 면학실 불을 끄고 나오는 사람은 언제나 나였다. 애초에 정시로 대학을 보내던 고등학교였는데 정시 비율이 역대 최악으로 쪼그라들면서 쓴맛을 본 학우들이 많았다. 그럼에도 잘 될 사람들은 어떻게든 잘 된다. 내신 앞 자리 숫자가 1인 학우들은 SKY에, 2인 학우들은 서강대, 한양대, 성균관대 등에 진학했다. 견고한 심화반 카르텔은 대학교에서까지 이어질 모양이었다. 에드는 수시에서 한양대학교 ERICA에 유일하게 서류 합격했으나 면접에서 탈락했다. 2019년 1월, 난생 처음으로 해외 여행이라는 것을 가 봤다. 도쿄에서 가족들과 함께 2박 3일. 5월, 이번에는 혼자서 도쿄에 방문했다. 오다이바에서 공연을 관람하는 등 2박 3일의 일정. 11월, 혼자서 오사카와 나라에 방문했다. 2박 3일의 마지막 해외 여행. 19학번 에드. 아마도 많은 이들에게 익숙할 그 에드이다. 정시로 한 지역 거점 국립대의 낮은 학과에 지원해 합격했다. 첫 학기는 3.86이라는 무난한 학점을 받았다. 2019년 8월 3일, 화양동의 어느 한 파티룸에서 열린 모임에 참석했고 이 때 많은 분들과 트위터 팔로워를 맺었다. 2019년 8월 24일, 서강대 컴퓨터공학과 학회 릴리즈의 정기 세미나 “로컬 옵티마”에 참석했고 이 날의 기억들이 에드의 훗날을 송두리째 바꾸어놓았다. 2학기 개강 첫 날 등교길에 문득 이 학교에 다니기 싫다는 생각이 들었다. 중간고사 직후 11월 일본 여행을 다녀오면서 생각을 정리했다. 이후 자체 휴강을 하면서 서울로 가겠다는 일념으로 입시 준비를 다시 시작하게 됐다. 2020년 연초까지만 해도 입시 공부는 순조로워 보였다. 노력한 만큼 대가가 돌아오는 공부는 처음이었고 너무 즐거웠다. 그러나 에드는 모르는 사이에 안에서부터 곪아가고 있었다. 코로나19가 전 세계를 강타했다. 외부와의 교류를 아예 끊고 지내던 에드는 6월 평가원 모의고사를 기점으로 급격히 우울과 불안의 늪에 빠지게 되었다. 자살 시도를 하기도 했다. 공부를 아예 놓다시피하며 지냈다. 수능 직전까지도 그랬다. 나중에는 대학을 꼭 가지 않아도 수도권에 자리잡고 살 수 있다며 수원에서 머무를 거처와 일자리를 알아보기도 했다. 그렇게 해탈한 마음으로 2023학년도 대학수학능력시험 고사장에 들어갔다. 그리고 나왔다. 예상외로 성적은 괜찮았다. 수도권 하위권 대학에 지원할 만한 점수는 되었다. 아무래도 학령 인구 감소의 덕을 본 듯 싶다. 2021년 고3 때 나를 불합격시킨 한양대학교 ERICA에 합격했다. 설레는 마음으로 상경길에 올랐다. 그러나 상상 이상으로 어려운 커리큘럼에 맞닥뜨렸다. 지방대의 1학년과 수도권의 1학년이 배우는 것의 내용과 양은 너무나도 달랐다. 매일 눈을 뜨자마자 그칠 줄 모르고 눈물이 쏟아지곤 했다. 여전히 부모님은 정신과에 가는 것을 반대했기 때문에 대신 나는 몰래 교내 상담 센터에 방문했다. 검사 결과는 매우 심각한 상태였다. 어째서인지 이것을 계기로 부모님께서 마음을 바꾸셨고 에드는 마침내 금전적 지원을 받아 정신과 초진을 받을 수 있게 되었다. 중등도 우울 에피소드, 불안 장애, 공황 장애 등을 진단받았다. 그러나 약물 치료를 시작한 이후로도 상태가 곧바로 쉽게 호전되지는 않았고, 2021학년도 2학기는 1.82라는 처참한 학점으로 막을 내리게 된다. 2021년 12월 6일, 2년 만에 사적인 만남을 가졌다. 참고로 이전의 마지막 사적 만남은 2019년 12월 24일이었다. 2022년 2022년 1월 25일, 코로나 시국의 두 번째 사적 만남이 있었다. 2022년 6월 16일, 코로나 시국의 세 번째 사적 만남이 있었다. 2022학년도 1학기에는 휴학을 하기로 결심했다. 그러나 휴학하면 지방으로 내려오라는 부모님의 말씀에 에드는 수도권 라이프를 포기할 수 없다며 그냥 한 학기를 더 다니겠다고 선언해 버린다. 2022학년도 1학기 학점은 2.66으로, 국가장학금 지급 조건인 2.75에는 미치지 못했다. 결국 다음 학기부터 휴학하기로 하고 여름방학 중에 짐을 싸들고 지방으로 내려와야 했다. 몇 개월 간은 요양한다는 느낌으로 시간을 보냈다. 9월 말부터는 게임메이커로 퇴마묵시록 개발에 돌입했다. 약물 치료는 여전히 진행 중이다. 2023년 휴학은 1년을 채울 생각이다. 그러니까 2023학년도 2학기에 복학하게 된다. 월세방을 빼고 나서 돌려받은 보증금을 대부분 써 버렸기 때문에 복학 전까지 보증금을 마련해야만 한다. 그래서 이것저것 일을 시작했다. 편의점 아르바이트도 시작했고 인공지능과 관련된 단발성 프로젝트에도 발을 담그게 되었다. 그러나 과연 300만 원 내지 500만 원 정도 되는 금액을 몇 달 안에 모을 수 있을 지는 아직까지 미지수이다.","link":"/2023/03/23/eddylily-00/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/tags/TensorFlow/"},{"name":"GameMaker™","slug":"GameMaker™","link":"/tags/GameMaker%E2%84%A2/"},{"name":"html, css","slug":"html-css","link":"/tags/html-css/"},{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"}],"categories":[{"name":"웹","slug":"웹","link":"/categories/%EC%9B%B9/"},{"name":"블로그","slug":"웹/블로그","link":"/categories/%EC%9B%B9/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"게임메이커","slug":"게임메이커","link":"/categories/%EA%B2%8C%EC%9E%84%EB%A9%94%EC%9D%B4%EC%BB%A4/"},{"name":"CV","slug":"웹/CV","link":"/categories/%EC%9B%B9/CV/"},{"name":"🦋 에드의 일상","slug":"🦋-에드의-일상","link":"/categories/%F0%9F%A6%8B-%EC%97%90%EB%93%9C%EC%9D%98-%EC%9D%BC%EC%83%81/"},{"name":"퇴마묵시록","slug":"게임메이커/퇴마묵시록","link":"/categories/%EA%B2%8C%EC%9E%84%EB%A9%94%EC%9D%B4%EC%BB%A4/%ED%87%B4%EB%A7%88%EB%AC%B5%EC%8B%9C%EB%A1%9D/"},{"name":"과거작","slug":"게임메이커/과거작","link":"/categories/%EA%B2%8C%EC%9E%84%EB%A9%94%EC%9D%B4%EC%BB%A4/%EA%B3%BC%EA%B1%B0%EC%9E%91/"},{"name":"알고리즘","slug":"알고리즘","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"BOJ","slug":"알고리즘/BOJ","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/BOJ/"},{"name":"기타","slug":"기타","link":"/categories/%EA%B8%B0%ED%83%80/"}]}