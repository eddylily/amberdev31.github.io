{"pages":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world.html"},{"title":"","text":"404 Oops! You're lost. We can not find the page you're looking for. Return home or try the search bar below.","link":"/404.html"},{"title":"","text":"Yousang Park박유상 Edward* 조금씩, 앞으로. 남들보다 늦고 느리더라도 포기하지 않기.오늘의 내가 어제의 나보다 성장해 있기를. Education 한양대학교 ERICA 인공지능학과 ー 2021. 03. ~ (휴학) Awards 전국 콘텐츠코리아랩 연합 콘텐츠 해커톤 대회 아이디어상(4등상) ー 2019. 01. 23. ~ 25. Certificates 2021년 제2회 일본어능력시험(JLPT) N2 ー 2022. 01. 13.","link":"/about/index.html"},{"title":"Contact","text":"Let us help Lorem ipsum sdolor sic amit, bolero carles. Name Email Message Send Cancel","link":"/contact/index.html"},{"title":"Login","text":"Email * Password * Forget Password? Login or login using: Important Information Duis autem vel eum iriure at dolor vulputate velit esse vel molestie at dolore. More details","link":"/login/index.html"},{"title":"projects","text":"Edward* ー 조금씩, 앞으로.naeyong","link":"/projects/index.html"},{"title":"","text":"We are here to help you. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Multipurpose Template Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Well Documented Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Responsive Design Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. We're committed to our process. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste. Goal definition Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Analyse Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Implementation Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Recent Work Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde voluptatem. Sed unde omnis iste natus error sit voluptatem. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Multipurpose Documented Responsive Clean & Fresh Raw denim you probably haven't heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Read more Food truck fixie locavore, accusamus mcsweeney's marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee. Qui photo booth letterpress, commodo enim craft beer mlkshk aliquip jean shorts ullamco ad vinyl cillum PBR. Homo nostrud organic, assumenda labore aesthetic magna delectus mollit. Keytar helvetica VHS salvia.. Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney's organic lomo retro fanny pack lo-fi farm-to-table readymade. Messenger bag gentrify pitchfork tattooed craft beer, iphone skateboard locavore carles etsy salvia banksy hoodie helvetica. DIY synth PBR banksy irony. Leggings gentrify squid 8-bit cred pitchfork. Williamsburg banh mi whatever gluten-free, carles pitchfork biodiesel fixie etsy retro mlkshk vice blog. Scenester cred you probably haven't heard of them, vinyl craft beer blog stumptown. Pitchfork sustainable tofu synth chambray yr. Trust fund seitan letterpress, keytar raw denim keffiyeh etsy art party before they sold out master cleanse gluten-free squid scenester freegan cosby sweater. Fanny pack portland seitan DIY, art party locavore wolf cliche high life echo park Austin. Cred vinyl keffiyeh DIY salvia PBR, banh mi before they sold out farm-to-table VHS viral locavore cosby sweater. Lomo wolf viral, mustache readymade thundercats keffiyeh craft beer marfa ethical. Wolf salvia freegan, sartorial keffiyeh echo park vegan. Denim you probably haven't heard of. Lorem ipsum dolor met consectetur adipisicing sit amet, consectetur adipisicing elit, of them jean shorts sed magna aliqua. Lorem ipsum dolor met. Lina Mars Commercial Director Raw denim you Mustache cliche tempor, williamsburg carles vegan helvetica probably haven't heard of them jean shorts austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Kate Ford Commercial Director Reprehenderit butcher stache cliche tempor, williamsburg carles vegan helvetica.retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Jake Witson Commercial Director Metronic - The Most Complete &amp; Popular Admin &amp; Frontend Theme Preview Admin Our Clients Lorem dipsum folor margade sitede lametep eiusmod psumquis dolore.","link":"/index.html"},{"title":"Projects","text":"All UI Design Web Development Photography Wordpress and Logo Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back","link":"/projects/index.html"}],"posts":[{"title":"초보인 내가 Hexo 블로그를 만들며 겪은 우여곡절","text":"테마를 설치했다면 이제는 적용해 볼 차례이다. 여기서 필자는 꽤나 많이 애를 먹었다. 총 3번의 실패를 겪었고, 결국은 가장 대중적으로 쓰이는 icarus라는 테마에 일단은 정착하기로 했다. 실패의 과정에 대해서는 이어서 간단히 서술하겠다. ‘Hexo not found’ 에러 엊그제까지만 해도 잘 구동되던 Hexo가 어느 날 갑자기 먹통이 되었다. 아무리 Hexo 관련 명령어를 터미널에 입력해보아도 Hexo를 찾을 수 없다는 에러 메시지만이 나를 맞이했다. $ npm config set prefix /usr/local 내용을 입력하세요. Claudia 테마 디자인도 마음에 들었고 처음에 딱 꽂혔던 테마였다. 그런데 이 테마는 딸려오는 플러그인이 너무 많았다. 그 중에서 sass 플러그인이 필자의 컴퓨터와 계속해서 충돌을 일으켜서 결국 적용을 포기했다. Anisina 테마 그래서 이번에는 가급적 추가적인 플러그인 설치가 필요치 않은 테마를 찾아보기로 했다. 그렇게 발견한 것이 이 테마다. 그런데 초보자가 뜯어고치기에는 너무나 어려운 구조로 되어 있었다. 그래서 결국 이 테마도 포기했다. Icarus 테마구글링만 해 봐도 알 수 있듯이, Hexo로 구축된 블로그에서 가장 대중적으로 쓰이는 테마이다. 생김새도 무난하며 디자인을 수정하기도 쉬운 편이다. 수정하다 막히는 부분이 생겨도 구글링하면 어지간하면 다 나온다. 한국어로 설명된 자료도 많은 편이라 굳이 영어나 일본어로 적힌 블로그까지 찾아보지 않아도 괜찮았다.","link":"/2021/12/24/How-to-apply-Hexo-Theme/"},{"title":"초보인 내가 Hexo 블로그에 테마를 설치한 과정","text":"테마를 설치하는 방법 자체는 단순하다. 크게 두 가지 방법이 있는데, 첫 번째는 해당 테마의 GitHub 리포지터리를 클론해오는 방법이고 두 번째는 터미널에 Hexo의 테마 설치 명령어를 입력하는 방법이다. 전자의 방법을 따르고 싶다면 우선 터미널에서 hexo 폴더 내의 themes 디렉토리로 이동한 다음, 아래와 같은 명령어를 입력하면 된다. $ git clone {주소} ‘{주소}’ 를 해당 테마의 GitHub 리포지터리 주소로 대체하여 적어넣으면 된다. 보통은 해당 테마의 설명서를 읽어보면 나와있곤 하다. 후자의 방법을 따르고 싶다면 아래와 같은 명령어를 입력하면 된다. $ npm install {테마명} ‘{테마명}’ 을 해당 테마의 이름으로 대체하여 적어넣으면 된다. 보통은 hexo-theme-themename’의 구조로 되어있으며, 역시 해당 테마의 설명서를 읽어보면 나와있곤 하다. 설치가 다 되었다면 아래와 같은 명령어를 입력해준다. 블로그의 테마를 변경해주는 명령어이다. $ hexo config theme {테마폴더명} ‘{테마폴더명}’ 을 themes 디렉토리 아래에 있는 해당 테마의 폴더명으로 대체하여 적어넣으면 된다. 혹은, hexo 폴더의 _config.yml 파일에 들어가서 ‘themes: ‘ 항목을 해당 테마의 폴더명으로 직접 대체해도 된다. 위의 명령어는 단지 이 과정을 터미널을 통해 수행해주는 것뿐이다. 이제 테마를 설치하고 적용하는 과정은 모두 끝났다. 남은 것은 테마의 세세한 부분을 뜯어고치는 것뿐이다. 이것에 대해서는 다음 포스팅에서 다루도록 하겠다.","link":"/2021/12/20/How-to-install-Hexo-Theme/"},{"title":"M1 Mac에 TensorFlow 설치하기","text":"뜬금없지만 자랑부터 하자면, 필자는 최근에 M1 Pro 칩셋이 탑재된 신형 맥북 프로를 선물받았다. (와!) 이전에 쓰던 맥북 에어와는 차원이 다른 빠릿함이 낯설게만 느껴졌다. 가히 최고의 성능을 자랑하는 맥북 프로이지만, 아직 문제점이 몇 가지 있다. 그 중 하나는 바로 기존의 x86 아키텍처에서 구동되던 프로그램들의 상당수가 Apple Sillicon(애플 실리콘, 최신 맥북에 탑재되는 애플이 자체 개발한 칩셋)에 최적화되어 있지 않다는 것이다. TensorFlow를 다뤄본 적 없었던 필자는 우선 Anaconda-Navigator를 이용하여 가상 환경을 구축한 다음, TensorFlow를 설치하고자 했었다. 그러나 몇 번의 삽질과 구글링을 하던 와중에 Anaconda-Navigator가 애플 실리콘에서 제대로 구동되지 않는다는 정보를 알게 되었다. (아뿔싸!) 대신, 무려 애플 공식 개발자 사이트에서 애플 실리콘이 탑재된 Mac에 TensorFlow를 설치하는 방법을 친절하게 설명해 주고 있다는 사실 또한 알게 되었다. [(여기를 누르면 볼 수 있다)](https://developer.apple.com/metal/tensorflow-plugin/) 위의 링크로 들어가서 ‘arm64: Apple Sillicon’ 이라는 제목 아래에 있는 과정들을 전부 따라하면 된다. 해당 포스팅에도 설명을 해 두겠다. 우선 여기에서 애플 실리콘 전용 Conda env를 다운로드받은 다음, 아래의 명령어를 차례대로 터미널에 입력한다. 이는 애플 실리콘이 탑재된 Mac에서도 Conda 개발 환경을 구축할 수 있도록 해 주는 ‘Miniforge3’라는 툴을 설치하는 과정이다. $ chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh $ sh ~/Downloads/Miniforge3-MacOSX-arm64.sh $ source ~/miniforge3/bin/activate설치가 완료되었으면, 이번에는 아래 명령어를 입력하여 TensorFlow에 필요한 속성 파일들을 설치해준다. $ conda install -c apple tensorflow-deps이제 거의 다 끝났다. 남은 것은 아래의 두 명령어를 터미널에 입력해주는 것뿐이다. $ python -m pip install tensorflow-macos $ python -m pip install tensorflow-metal이렇게 해서 애플 실리콘이 탑재된 Mac에서 TensorFlow를 사용할 수 있게 되었다. Conda를 이용해 따로 가상의 개발 환경을 구축한 다음 Jupyter Notebook을 통해 사용할 수도 있는데, 이는 다음 포스팅에서 다루어보도록 하겠다.","link":"/2022/01/21/How-to-install-tensorflow-on-m1-mac/"},{"title":"Hexo Icarus 테마 커스터마이징 (v.221101)","text":"Hexo로 블로그를 만든 지도 1년이 다 되어 간다. 블로그는 겉치장보다는 내용이 중요하다지만 그래도 깔끔하게 꾸미면 보기에 더 낫지 않겠는가. 그래서 이참에 그동안 다듬고 싶었던 몇몇 사소한 부분들을 손보기로 했다. 컨테이너 너비 늘리기 여기서 말하는 컨테이너란 Icarus 테마에서 배경을 제외한 프로필과 위젯, 포스트 등이 표시되는 영역을 의미한다. 기본 설정 상 데스크탑 등에서 이 블로그를 볼 때 포스트를 표시하는 영역이 너무 좁다는 생각이 들어 다음과 같이 일부 수치를 조절해 주었다. px의 크기가 커질수록 컨테이너의 너비가 늘어난다. /themes/icarus/include/style/base.styl12345$gap ?= 64px$tablet ?= 769px$desktop ?= 1288px /* 증가시킴 */$widescreen ?= 1448px /* 증가시킴 */$fullhd ?= 1928px /* 증가시킴 */ 포스팅 날짜 표기 Icarus 테마는 기본적으로 포스팅한 날짜를 명확하게 표기하지 않고 ‘N일 전’, ‘N달 전’과 같이 표기하도록 설정되어 있다. 이것을 ‘YYYY. MM. DD.’ 형식으로 바꾸기로 했다. 이 블로그의 내용이 많은 도움이 되었다. /themes/icarus/layout/common/article.jsx12345678910111213module.exports = class extends Component { render() { &lt;div class=&quot;card&quot;&gt; &lt;article class={`card-content article${'direction' in page ? ' ' + page.direction : ''}`} role=&quot;article&quot;&gt; {page.layout !== 'page' ? &lt;div class=&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt; &lt;div class=&quot;level-left&quot;&gt; {/* Creation Date */} {page.date &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.created_at', `/* &lt;time dateTime=&quot;${date_xml(page.date)}&quot; title=&quot;${new Date(page.date)}&quot;&gt; */ ${date(page.date)} /* &lt;/time&gt; */` /* &lt;time&gt; 태그를 지운다. 단, 코드 양쪽 끝의 `는 지우지 않는다. */ }}&gt;&lt;/span&gt;} 줄 간격 변경 Icarus 테마의 기본 줄 간격이 너무 좁다는 생각이 들어서 약간의 여유를 주기로 했다. line-height으로 줄 간격을 조절할 수 있다. margin-top으로 문단 사이의 간격도 조절할 수 있다. /themes/icarus/include/style/article.styl12345678article &amp;.article .content word-wrap: break-word font-size: $article-font-size line-height: 28px /* 줄 간격 */ color: #212121 /* 글자 색 */ margin-top: 28px /* 문단 간격 */ 카테고리 정비 기존의 무분별한 카테고리를 조금 다듬어보았다. 기존 마크다운 파일의 최상단에 categories: 항목을 다음과 같은 형태로 작성하면 하위 카테고리를 만들 수 있다. 123 categories:- 웹- 블로그 프로필 편집 프로필을 단순하게 표시하고 싶어서 기본적으로 제공되는 포스트/카테고리/태그 수, 팔로우 버튼, 소셜 링크 등 잡다한 것들을 모두 지워버렸다. 그리고 프로필 이미지나 닉네임을 누르면 CV 페이지로 연결되도록 설정해 보았다. /themes/icarus/layout/widget/profile.jsx123456789101112131415161718192021222324252627282930313233343536373839404142434445class Profile extends Component { render() { const { avatar, avatarRounded, author, authorTitle, location, // counter, * 포스트/카테고리/태그 수 관련 항목 // followLink, * 팔로우 버튼 관련 항목 // followTitle, * 팔로우 버튼 관련 항목 // socialLinks * 소셜 링크 관련 항목 } = this.props; return &lt;div class=&quot;card widget&quot; data-type=&quot;profile&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;nav class=&quot;level&quot;&gt; &lt;div class=&quot;level-item has-text-centered flex-shrink-1&quot;&gt; &lt;div&gt; &lt;figure class=&quot;image is-128x128 mx-auto mb-2&quot;&gt; &lt;a href=&quot;https://edward.moe&quot; target=&quot;_blank&quot;&gt; /* 프로필 이미지를 누르면 새 탭에서 해당 페이지가 열림 */ &lt;img class={'avatar' + (avatarRounded ? ' is-rounded' : '')} src={avatar} alt={author} /&gt; &lt;/a&gt; /* a 태그 닫아주기 */ &lt;/figure&gt; {author ? &lt;a href=&quot;https://edward.moe&quot; target=&quot;_blank&quot;&gt; /* 닉네임을 누르면 새 탭에서 해당 페이지가 열림 */ &lt;p class=&quot;title is-size-4 is-block&quot; style={{'line-height': 'inherit'}}&gt;{author}&lt;/p&gt; &lt;/a&gt; : null} /* a 태그 닫아주기 *//* * * 중략 * * */ return { avatar: getAvatar(), avatarRounded: avatar_rounded, author, authorTitle: author_title, location, /* 해당 부분 주석 처리 or 지우기 counter: { // CODE }, followLink: // CODE, followTitle: // CODE, socialLinks */ };}); 적용 폰트 변경 (가장 큰 난관) 조금 더 깔끔해 보이는 폰트를 원해서 고양일산체 (특별한 허가 없이 사용 가능한 폰트)를 적용하려 했다. 그러나 로컬에서는 잘 적용되는 것을 확인했으나, 서버에 업로드했을 때에는 변경된 폰트가 적용되지 않았다. 그래서 보다 보편적으로 쓰이고 있는 나눔스퀘어체를 대안으로 삼았으나 이 역시 로컬에서만 적용되었다. 브라우저에 쌓인 캐시를 삭제하는 등의 시도도 당연히 해 보았으나 결국 실패했다. /themes/icarus/include/style/base.styl123456@import url('../../source/fonts/GoyangIlsan.css')@import url('https://webfontworld.github.io/naver/NanumSquare.css')@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR&amp;display=swap')$family-sans-serif ?= 'GoyangIlsan', 'NanumSquare', Noto Sans CJK KR, Noto Sans KR$family-code ?= 'Source Code Pro', monospace GoyangIlsan.css123456789101112131415@font-face { font-family: 'GoyangIlsan'; font-weight: 700; font-style: normal; src: url('/fonts/GoyangIlsanR-Regular.woff2') format('woff2'); font-display: swap;}@font-face { font-family: 'GoyangIlsan'; font-weight: 400; font-style: normal; src: url('/fonts/GoyangIlsan_L.woff2') format('woff2'); font-display: swap;} 그러던 중 구글링을 통해 Hexo에 대한 새로운 사실을 알아냈다. (힌트를 얻은 블로그) hexo server 명령어를 통해 로컬에서 가동할 때에는 css의 변경 사항이 즉시 반영되지만, hexo d -g 명령어를 통해 서버의 내용을 갱신할 때에는 변경 사항이 반영되지 않는 이슈가 있다는 것이었다. 실제로 확인해 보니 GitHub 상의 리포지터리에 있는 css 디렉토리를 삭제하여도 hexo deploy 명령어를 입력하면 몇 개월 전에 커밋했던 css 파일들이 복구될 뿐이었다. 그래서 GitHub 상에 있는 css 파일을 직접 수정해 보기로 했다. css 디렉토리 안에 있는 default.css와 style.css를 수정했다. 그러나 다시 hexo deploy 명령어를 입력하자 커밋 내역이 사라지고 기존 파일들로 다시 대체되었다. 그 때 눈에 들어온 것이 있었으니, 바로 hexo가 설치된 디렉토리 바로 아래에 있는 public 폴더였다. public 폴더 안에는 GitHub 상에 있는 것과 똑같은 파일 및 폴더들이 자리하고 있었다. 그 중에서 css 디렉토리 안에 있는 default.css와 style.css를 수정한 뒤, hexo clean 명령어를 실행하고 나서 다시 hexo d -g 명령어를 실행하니 변경 사항들이 정상적으로 적용되는 것을 볼 수 있었다. 지금까지 ./themes/icarus 디렉토리 아래에 있는 파일들을 수정하는 데에만 집중하다 보니 등잔 밑이 어두운 줄도 모르고 있었던 것이다. /public/default.css & style.css1234567891011121314151617font-family: 'GoyangIlsan', 'NanumSqaure', 'Noto Sans CJK KR', 'Noto Sans KR', Ubuntu, Roboto, sans-serif;/* 모든 폰트 관련 코드 수정 */html { background-color: #fce4ec; }/* 배경색 관련 코드 수정 */a { color: #e91e63; }/* 모든 강조색 관련 코드 수정 */.content h1 { padding-left: 8px; border-left: 8px solid #e91e63; }/* 모든 h1, h2의 왼쪽에 포인트 색상 추가 *//* * * 이하 생략 * * */ 마침내, css 변경 사항들을 적용하는 데에 성공했다! 이것을 과연 ‘성공’했다고 말할 수 있는지는 모르겠지만 아무튼 원하는 대로 커스터마이징된 블로그를 보니 기분이 좋았다. 이틀에 걸쳐 작업한 보람이 있었다. 이상으로 Hexo 블로그의 Icarus 테마의 일부를 커스터마이징하는 방법에 대한 서술을 마친다.","link":"/2022/10/31/How-to-customize-Hexo-Theme/"},{"title":"초보인 내가 Hexo 블로그를 만든 과정","text":"이전에도 블로그를 운영해 본 경험은 많이 있었지만, 이렇게 직접 밑바닥부터(?) 하나하나 쌓아가며 만든 블로그는 여기가 처음이다. 사실 아예 무에서 유를 창조한 것은 아니고, Hexo라는 툴의 도움을 받았다. Hexo가 무엇인지에 대해서는 이미 다른 블로거들이 충분히 설명해두었을 테니, 여기서는 빠르게 여러분이 원하는 본론ー블로그를 설치하는 과정으로 들어가겠다. 사실 https://hexo.io/ko/docs/ 에 들어가면 모든 내용이 설명되어 있긴 하다. 영어 독해가 되시는 분은 https://hexo.io/docs/ 를 보셔도 좋다. 필자의 컴퓨터에는 Git이나 Node.js는 이미 설치되어 있었기에 위 문서에서 설명하는 대로 Hexo를 설치하기 위해 곧바로 터미널에 다음과 같이 명령어를 입력했다. $ npm install -g hexo-cli 그런데 ERESOLVE 에러가 나며 설치가 되지 않았다. 이 블로거 분께서 말씀하시길, Node.js의 버전과 npm의 버전에 따라서 서로 호환이 잘 안 되는 경우가 있다고 한다. 초보자로서 잘은 모르겠지만 그러려니 하며 일단 16.x 버전의 Node.js를 구버전인 12.x 버전으로 다운그레이드하기로 했다. 다음 명령어를 입력하면 기존에 설치된 Node.js의 버전을 v12.18.3으로 다운그레이드할 수 있다. $ npm install -g n $ n 12.18.3 다운그레이드가 잘 되었는지는 다음 명령어를 통해 확인할 수 있다. 자신이 설치하고자 한 버전과 같은 숫자가 뜨면 성공한 것이다. $ node -v 아무튼 이렇게 해서 Hexo를 설치했다면, 다음은 블로그 환경을 구축할 차례이다. 적당한 곳에 새로운 폴더를 만들고 해당 디렉토리에 들어간 다음, Hexo 블로그 환경을 구축하기 위한 명령어를 입력해준다. $ hexo init hexo $ cd hexo $ npm install 첫 번째 명령어는 Hexo의 초기 환경을 세팅하는 명령어이다. ‘hexo’ 라는 하위 폴더에 필요한 파일들을 설치한다는 의미로 이해하면 된다. 그리고 두 번째 명령어를 입력하여 앞서 만들어진 하위 폴더로 이동한 다음, 세 번째 명령어를 입력하여 Hexo 구동에 필요한 Node 모듈을 설치해주는 것이다. 위의 과정을 모두 끝마쳤다면 터미널에 다음과 같은 명령어를 입력하여 설치가 잘 되었는지 테스트해보자. $ hexo server 위의 명령어는 로컬 서버를 가동하는 명령어로, 입력하였을 때 별다른 에러가 발생하지 않는다면 성공한 것이다. 주소창에 ‘localhost:4000’ 을 입력하여 들어가보면 기본 테마가 적용된 Hexo 블로그의 모습이 나타날 것이다. $ hexo server -o 혹은 위와 같이 명령어 뒤에 ‘-o’ 를 붙이면 로컬 서버를 가동시키는 동시에 새 창을 띄워 자신의 블로그 페이지의 모습을 확인할 수 있다. 필요에 따라 두 명령어 중 하나를 사용하면 된다. 이상으로 기본적인 Hexo 설치 및 블로그 환경 설정 과정을 설명하였다. 다음에는 블로그에 새로운 테마를 적용하고 테마를 수정했던 과정에 대해 포스팅하겠다. 필자는 의외로 이 부분에서 꽤 고생했기 때문에 부디 해당 포스팅이 조금이나마 다른 초보자들에게 도움이 되었으면 좋겠다.","link":"/2021/12/13/How-to-make-Hexo-Blog/"},{"title":"CV 페이지를 만들어보았다 [1부]","text":"오래 전부터 필자는 자신만의 CV 페이지를 갖고 싶어했다. 정작 남들 앞에 내세울 경력도 실력도 없는 필자이지만, 아무튼 개발자를 지망하는 이들이라면 누구나 그러한 생각을 해 보았을 것이다. 미려한 디자인의 CV부터 밋밋하지만 실속 있는 CV까지, 이미 많은 개발자들이 자신만의 개성이 담긴 CV 페이지를 가지고 있다. 무릇 개발자라면 CV 페이지 쯤은 직접 만들어야 마땅한 것이다. 한 줌도 채 안 되는 html 지식을 가진 필자는 이번 기회에 html/css에 더욱 친숙해지기 위해 바닥부터 직접 시작해보기로 했다. 레이아웃의 기본 틀은 여기에서 도움을 받았다. 우선 코드 작성에 앞서 CV 페이지의 UI 디자인을 간단히 해 보기로 했다. 깔끔하면서도 너무 밋밋하지 않은 디자인을 원했다. 주요 색상은 Material Design Palette의 Pink 색상을 사용하였다. 1234567891011121314151617181920&lt;style&gt;header {height: 96px;} /* 상단 여백 */article { position: absolute; left: 50%; width: 480px; height: 256px; padding-left: 16px; padding-right: 16px; padding-top: 32px; padding-bottom: 16px;}wpink { position: absolute; right: 50%; transform: translateX(-32px); width: 352px; height: 256px; background: #F48FB1; padding-left: 32px; padding-right: 16px; padding-top: 24px; padding-bottom: 16px;}&lt;/style&gt; absolute relative static 설명 https://velog.io/@rimu/css-요소의-위치position-정리 1234567891011121314151617181920212223&lt;style&gt;@font-face{ font-family: 'KintexL'; /* 고양일산체 L */ src: url('./fonts/KintexL/GoyangIlsan_L.woff2') format(‘woff2’), url('./fonts/KintexL/GoyangIlsan_L.ttf') format('truetype'), url('./fonts/KintexL/GoyangIlsan_L.woff') format(‘woff’), url('./fonts/KintexR/GoyangIlsan_L.eot?#iefix') format('embedded-opentype');}@font-face{ font-family: 'KintexR'; /* 고양일산체 R */ src: url('./fonts/KintexR/GoyangIlsanR-Regular.woff2') format(‘woff2’), url('./fonts/KintexR/GoyangIlsanR-Regular.ttf') format('truetype'), url('./fonts/KintexR/GoyangIlsanR-Regular.woff') format(‘woff’), url('./fonts/KintexR/GoyangIlsanR-Regular.eot?#iefix') format('embedded-opentype');}body { font-family: 'KintexL', 'KintexR', Arial, Helvetica, sans-serif; /* 고양일산체 적용 */ background-color: #FCE4EC;}&lt;/style&gt; WOFF(World Open Font Format)란 웹 상에서 가장 보편적으로 사용되는 폰트 포맷이다. Chrome이나 Safari 등 주요 브라우저에서 지원하며, 사실상의 표준으로 자리잡았다. 자세한 내용은 위키백과나 다른 블로그에서 찾을 수 있다. 고양일산체는 웹과 모바일을 포함한 다양한 매체에 자유롭게 사용이 가능한 폰트이다. 필자가 개인적으로 좋아하는 폰트라서 이번 CV 페이지 작업에 사용하기로 하였다. 고양일산체는 공식적으로는 WOFF 파일을 제공하지 않기 때문에 파일 변환 과정을 거쳐 사용하게 되었다. 그런데 문제가 하나 있었다. 어째서인지 Chrome 브라우저에서는 변경한 폰트가 적용되지 않는 것이었다. 반면 Safari 브라우저에서는 변경한 폰트가 정상적으로 적용되었다. 아직 그 이유를 찾아내지는 못 했으나 만약 해결하게 된다면 새로운 포스트에 해결 방법을 적어두도록 하겠다. 1234567891011121314151617181920212223242526&lt;style&gt;btn_github { position: absolute; top: 388px; right: 50%; transform: translateX(-288px); width: 96px; height: 96px; background: #e91e63; padding: 16px; display: block;} /* 버튼 영역 */btn_github &gt; img { position: absolute; width: 100%; top: 50%; left: 50%; transform: translate(-50%, -50%);} /* 버튼 내 아이콘 이미지 */btn_github &gt; span { position: absolute; top: 120%; left: 50%; width: 96px; height: 24px; transform: translate(-50%, -50%); text-align: center;} /* 버튼 아래 글씨 */&lt;/style&gt; translate 설명 2부에서 계속","link":"/2022/09/21/cv-page-writing-1/"},{"title":"초등학생 때 만든 게임들을 리마스터해 보았다","text":"초등학생 때 필자는 친구와 함께 GameMaker™ 8.0을 이용해 허접한 자작 게임을 만들곤 하였다. 개발 관련 지식은 당연히 전무했지만, 블록코딩 위주로 이루어진 툴이었기에 입문용으로는 제격이었다. 그렇게 서로 자신이 만든 게임을 공유하며 놀려고 초딩들의 컴퓨터 도전기라는 카페를 만들었다. 한때 회원수 600명을 웃돌 정도로 성장했지만, 우리가 중학생이 된 이후로는 점차 관리가 소홀해졌다. (이름값 하는 카페…?) 아무튼 당시에는 정말로 순수한 흥미와 열정으로 개발을 하곤 하였다. 그 무렵부터 ‘프로그래머’가 되겠다는 필자의 꿈이 태동했다고 생각한다. 당시에는 전혀 몰랐지만, 그 시절의 컴퓨터공학과는 비인기학과였고 개발자는 기피 직업 중 하나였다고 한다. 그로부터 불과 몇 년 사이에 세상은 변해 컴퓨터공학과의 입결은 하늘을 찌르고, 개발자는 유망 직종이 되었으며, 어디서든 쉽게 개발자 커뮤니티를 찾을 수 있게 되었다. 이런 이야기를 갑자기 왜 꺼내게 되었냐 하면, 얼마 전에 필자가 과거에 만들었던 자작 게임들 중 그나마 봐 줄 만한 것들을 추려서 필자의 GitHub에 업로드하면서 과거를 회상하게 되었기 때문이다. 당시에는 나름 괜찮게 만들었다고 생각한 게임이, 성장하고 나서 지금의 시점에서 다시 보니 모든 것이 허술하고 버그투성이였다. 그림판으로 끄적인 듯한 스프라이트며 의도한 대로 작동하지 않는 오브젝트며…. 그럼에도 어찌저찌 돌아가는 게임을 플레이하며 추억에 잠겨있던 중 문득 어떤 생각이 들었다. 지금의 나라면 이 게임들의 완성도를 더 높일 수 있지 않을까? 그렇게 무작정 미완성 게임이나 버그가 많은 게임들을 붙잡고 뜯어고쳐보기로 했다. 일명 ‘리마스터’. 리마스터라고는 해도 외견은 거의 그대로 유지시킨 채 버그를 잡고 부족해 보이는 점들을 보완하는 것뿐이다. 정신적으로 힘든 상황에서 점점 꺼져만 가는 개발에 대한 열정의 불씨…. 그렇지만 이대로 아무 것도 하지 않는 것보다는 비록 보잘것없더라도 뭐라도 할 수 있는 걸 해 보자는 생각에서였다. 「터치터치」 리마스터 첫 리마스터 작품으로 고른 것은 필자가 2011년 2월에 개발한 터치터치라는 게임이다. 마우스나 터치패드를 이용하여 커서를 움직여 랜덤하게 출몰하는 빨간 버튼을 재빨리 눌러 없애야 하는 게임이다. 두더지잡기 놀이에서 영감을 얻어 만들었던 이 게임은 낮은 그래픽 퀄리티는 둘째로 치더라도 당시의 미숙했던 구현 능력으로 인한 많은 버그를 안고 있었다. 빨간 버튼은 1.5초 안에 누르기만 하면 되는데, 간혹 1.5초가 지나지 않았는데도 게임 오버가 되기도 했다. 심지어는 실수로 지뢰 버튼을 눌렀을 때 100코인을 지불하지 못 하면 게임 오버가 되는데, 코인이 부족해도 그냥 게임이 진행되기도 했다. 이외에도 자잘한 버그들과 필요없는 기능들이 들어있었다. 우선 창 크기는 마우스나 터치패드로 버튼을 찾아 누르기 용이하도록 기존의 작은 창 크기를 유지하기로 했다. 다소 유치하고 초라해 보이는 스프라이트들 역시 나름 그 시절의 열정과 추억이 담겨있는 것들이기에 수정은 최소한으로 하고, 가능한 한 기존의 것을 그대로 유지하기로 했다. 대신 버그 수정이나 시스템의 체계화 등 게임의 기능적인 부분을 다듬는 데에 치중하기로 했다. 단순한 구조의 게임이었기에 3시간여 만에 완성할 수 있었다. 보다 자세한 내용은 필자의 GitHub에서 확인할 수 있다. 게임 개발 파일과 exe 파일도 다운로드 가능하다. 「클라우드 어드벤처」 리마스터 두 번째로 고른 것은 필자가 2011년 9월에 개발한 클라우드 어드벤처라는 게임이다. 맵 안에 있는 별을 모두 먹은 다음, 구름 블럭을 밟고 꼭대기로 올라가면 되는 게임이다. 이 게임 역시 너무나도 많은 버그를 가지고 있었지만…. 게임을 진행하는 것 자체에는 큰 문제가 없었다. 의도와는 다르게 작동하는 게임 속 구름 블록들, 그러나 그런 엉망진창인 블록들을 이용해서 게임을 클리어해내고 마는 플레이어. 이것이야말로 ‘버그가 아니라 기능입니다 :)’ 의 표본 아닐까? 그럼에도 필자는 본디 의도했던대로 게임이 진행되는 모습을 보고 싶었다. 그렇게 며칠 동안 조금씩 버그를 고쳐 나갔다. 그러면서 과거의 자신이 왜 이런 기초적인 문제들을 해결하지 못 했는지 의문이 들었다. 이에 대해 필자는 개발에 대해 문외한이었던 어린 시기에 블록코딩(게임메이커)으로 코딩에 입문했고, 그 이외의 다른 기초지식을 배우지 못 했기 때문이라고 생각했다. 기본적인 컴퓨터 언어의 문법과 실행 원리만 파악하고 있었어도 그런 식으로 코드를 짜지 않았을 터이다. 어찌 됐든, 지금은 그 때보다는 성장했으니 그걸로 된 것 아닐까. 보다 자세한 내용은 필자의 GitHub에서 확인할 수 있다. 게임 개발 파일과 exe 파일도 다운로드 가능하다. 개발 환경 필자는 기존에 개발했던 게임들을 앞으로도 몇 개 더 리마스터할 생각이다. 위의 게임들은 모두 GameMaker™ 8.0 (.gmk 확장자), 그러니까 구 버전 게임메이커로 개발한 것이다. 비록 지금은 해당 버전은 사후 지원이 끊긴 지 오래이지만, 리마스터링 또한 해당 툴로 진행하고 있다. YoYo Games는 2012년에 기존의 게임메이커를 리뉴얼한 GameMaker: Studio™ (.gmx 확장자)를 출시했고, 이어서 2017년에는 GameMaker™ Studio 2 (.yyp 확장자)를 출시했다. 각자 다른 확장자를 가지고 있기도 하고, 소스 파일 변환 과정을 거치지 않는 한 이들은 서로 호환되지 않는다. .gmk 파일을 .gmx 파일로, 혹은 .gmx 파일을 .yyp 파일로 변환하는 것은 비록 완벽하지는 않지만 공식 기능으로서 지원된다. 그러나 .gmk 파일을 .yyp 파일로 직접 변환하는 것은 불가능하다. 그럼 .gmk 파일을 .gmx 파일로 변환한 다음 그것을 다시 .yyp 파일로 변환하면 되는 것 아니냐고 생각할 수도 있지만, 두 번의 변환을 거친 파일의 품질을 보장할 수 없을 뿐더러, 10년도 더 전에 작성한 스파게티 코드로 점철된 소스 파일을 갈아엎어야 하는 것은 매한가지이다. 애초에 기존 작품들의 소스 파일이 GameMaker™ 8.0, 그러니까 구 버전 게임메이커에서 쓰여졌고, 필자에게도 아직은 구 버전이 더 익숙하기 때문에 리마스터 작업은 앞서 말했듯 구 버전 게임메이커로 진행하기로 했다. 앞으로의 계획 무릇 소프트웨어 엔지니어를 꿈꾸는 자는 끊임없이 도전하고 항상 새로운 것을 배워야 하기 마련이다. 그러나 필자는 그렇게 하지 못 하고 있다. 아니, 안 하고 있다. 어릴 적 만져본 게임메이커, 대학교 교양 강의 수준에 머물러 있는 C언어와 Python 지식, 반 년 정도 하다가 때려친 Android 앱 개발 정도가 지금의 필자가 가진 지식의 전부이다. 이래서야 앞으로 전공을 살려 일하는 건 무리다. 배우려는 의지가 없는 사람이 무슨 발전이 있겠는가. 다른 사람들이 매일 실력을 갈고 닦고 스펙을 쌓아가는 와중에, 필자는 또 엉뚱한 계획을 세운다. 바로 GameMaker™ Studio 2를 이용하여 Windows 환경과 macOS 환경에서 모두 구동되는 횡스크롤 RPG 게임을 개발하는 것이다. 연내에 베타 버전을 완성시키는 것이 목표이다. 사실 이것은 10여 년 전 중학생이었던 필자의 꿈이기도 했다. 마침 휴학도 했겠다 남아도는 것이 시간이니 지금이야말로 이 목표를 이루기에 적기가 아닐까. 아무리 지금의 ‘나’가 못났다 해도 10여 년 전의 ‘나’보다는 많이 성장했다고 생각한다. 글은 이 쯤에서 마무리. 조만간 새로운 포스팅에서 만납시다.","link":"/2022/09/19/gamemaker-works-remaster-1/"},{"title":"내가 해냄","text":"이걸 해냄감사해요 하루님!!!","link":"/2021/12/11/%EB%82%B4%EA%B0%80-%ED%95%B4%EB%83%84/"},{"title":"스택, 큐, 덱 (BOJ 10828&#x2F;10845&#x2F;10866)","text":"10828. 스택스택이란 쌓는다는 의미로, 선입후출의 원칙이 적용되는 자료구조이다.스택 라이브러리 &lt;stack&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. stack&lt;자료형&gt; s → ‘s’라는 이름의 해당 자료형의 스택을 선언함 s.push(a) → 스택 s에 a를 밀어넣음 (단, a는 스택 s와 같은 자료형이어야 함) s.pop() → 스택 s의 맨 위에 있는 요소를 꺼냄 s.top() → 스택 s의 맨 위에 있는 요소를 불러옴 s.size() → 스택 s의 크기를 불러옴 (비어있을 경우 0) s.empty() → 스택 s가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_10828 (2022. 11. 10. 풀이)1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;stack&gt;#include &lt;string&gt;using namespace std;stack&lt;int&gt; s; // 's'라는 이름의 int 자료형의 스택을 선언함string a[100001];int main() { int n, k; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a[i]; if (a[i] == &quot;push&quot;) { cin &gt;&gt; k; s.push(k); // 스택 s에 정수 k를 밀어넣음 } else if (a[i] == &quot;pop&quot;) { // 만약 스택 s가 비어있다면, -1을 출력함 if (s.empty() == true) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 스택 s가 비어있지 않다면, else { cout &lt;&lt; s.top() &lt;&lt; &quot;\\n&quot;; // 스택 s의 맨 위에 있는 요소를 불러와 출력함 s.pop(); // 스택 s의 맨 위에 있는 요소를 꺼냄 } } else if (a[i] == &quot;top&quot;) { // 만약 스택 s가 비어있다면, -1을 출력함 if (s.empty() == true) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 스택 s가 비어있지 않다면, 스택 s의 맨 위에 있는 요소를 불러와 출력함 else cout &lt;&lt; s.top() &lt;&lt; &quot;\\n&quot;; } else if (a[i] == &quot;size&quot;) cout &lt;&lt; s.size() &lt;&lt; &quot;\\n&quot;; // 스택 s의 크기를 출력함 else if (a[i] == &quot;empty&quot;) { if (s.empty() == true) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;} 10845. 큐 큐는 일렬로 늘어선 모양새를 뜻하며, 선입선출의 원칙이 적용되는 자료구조이다.큐 라이브러리 &lt;queue&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. queue&lt;자료형&gt; q → ‘q’라는 이름의 해당 자료형의 큐를 선언함 q.push(a) → 큐 q에 a를 밀어넣음 (단, a는 큐 q와 같은 자료형이어야 함) q.pop() → 큐 q의 맨 앞에 있는(가장 먼저 들어간) 요소를 꺼냄 q.front() → 큐 q의 맨 앞에 있는(가장 먼저 들어간) 요소를 불러옴 q.back() → 큐 q의 맨 뒤에 있는(가장 나중에 들어간) 요소를 불러옴 q.size() → 큐 q의 크기를 불러옴 (비어있을 경우 0) q.empty() → 큐 q가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) boj_10845 (2022. 11. 10. 풀이)12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;queue&gt;using namespace std;string a;queue&lt;int&gt; q;int main() { int n, k; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a; if (a == &quot;push&quot;) { cin &gt;&gt; k; q.push(k); // 큐 q에 정수 k를 밀어넣음 } else if (a == &quot;pop&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, else { cout &lt;&lt; q.front() &lt;&lt; &quot;\\n&quot;; // 큐 q의 맨 앞에 있는 요소를 불러와 출력함 q.pop(); // 큐 q의 맨 앞에 있는 요소를 꺼냄 } } else if (a == &quot;front&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, 큐 q의 맨 앞에 있는 요소를 불러와 출력함 else cout &lt;&lt; q.front() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;back&quot;) { // 만약 큐 q가 비어있다면, -1을 출력함 if (q.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; // 만약 큐 q가 비어있지 않다면, 큐 q의 맨 뒤에 있는 요소를 불러와 출력함 else cout &lt;&lt; q.back() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;size&quot;) cout &lt;&lt; q.size() &lt;&lt; &quot;\\n&quot;; // 큐 q의 크기를 출력함 else if (a == &quot;empty&quot;) { if (q.empty()) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;} 10866. 덱 덱이란 double-ended queue의 줄임말로, 양방향에서 요소를 삽입하고 삭제할 수 있는 자료구조이다.덱 라이브러리 &lt;deque&gt;에 들어있는 기본 함수들의 사용법은 다음과 같다. deque&lt;자료형&gt; dq → ‘dq’라는 이름의 해당 자료형의 덱을 선언함 dq.push_front(a) → 덱 dq의 맨 앞에에 a를 밀어넣음 (단, a는 덱 dq와 같은 자료형이어야 함) dq.push_back(a) → 덱 dq의 맨 뒤에 a를 밀어넣음 (단, a는 덱 dq와 같은 자료형이어야 함) dq.pop_front() → 덱 dq의 맨 앞에 있는 요소를 꺼냄 dq.pop_back() → 덱 dq의 맨 뒤에 있는 요소를 꺼냄 dq.front() → 덱 dq의 맨 앞에 있는(가장 먼저 들어간) 요소를 불러옴 dq.back() → 덱 dq의 맨 뒤에 있는(가장 나중에 들어간) 요소를 불러옴 dq.size() → 덱 dq의 크기를 불러옴 (비어있을 경우 0) dq.empty() → 덱 dq가 비어있는지 여부를 확인함 (비어있을 경우 true, 즉 1) 그런데, BOJ 10866번 문제에서는 size() 함수를 사용하면 시간 초과가 뜬다. 이는 size() 연산의 처리 방식과 관련이 있는데, size() 연산은 실행할 때마다 해당 자료구조의 처음부터 끝까지 전부 훑고 지나가기 때문이다. 따라서 다음과 같은 형태의 풀이가 요구된다. boj_10866 (2022. 11. 10. 풀이)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;deque&gt;using namespace std;string a;deque&lt;int&gt; dq;int main() { int n, k; int size = 0; cin &gt;&gt; n; for(int i=0; i&lt;n; i++) { cin &gt;&gt; a; if (a == &quot;push_front&quot;) { cin &gt;&gt; k; dq.push_front(k); size++; } else if (a == &quot;push_back&quot;) { cin &gt;&gt; k; dq.push_back(k); size++; } else if (a == &quot;pop_front&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else { cout &lt;&lt; dq.front() &lt;&lt; &quot;\\n&quot;; dq.pop_front(); size--; } } else if (a == &quot;pop_back&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else { cout &lt;&lt; dq.back() &lt;&lt; &quot;\\n&quot;; dq.pop_back(); size--; } } else if (a == &quot;front&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; dq.front() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;back&quot;) { if (dq.empty()) cout &lt;&lt; -1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; dq.back() &lt;&lt; &quot;\\n&quot;; } else if (a == &quot;size&quot;) cout &lt;&lt; size &lt;&lt; &quot;\\n&quot;; else if (a == &quot;empty&quot;) { if (dq.empty()) cout &lt;&lt; 1 &lt;&lt; &quot;\\n&quot;; else cout &lt;&lt; 0 &lt;&lt; &quot;\\n&quot;; } } return 0;}","link":"/2022/11/29/boj-10828-10845-10866/"},{"title":"C++ 벡터(vector) 사용법 (BOJ 2822&#x2F;5635&#x2F;14769)","text":"vector 컨테이너에 대하여 C++의 표준 라이브러리에 내장된 컨테이너의 일종이다. 들어오는 값의 개수에 따라 유동적으로 메모리를 할당하며, 미리 크기를 정해둘 수도 있다. 그래서 사용하기에 편리하지만, 배열에 비해 처리 속도는 느린 편이라고 한다. vector&lt;자료형&gt; v; → 해당 자료형의 값을 담을 수 있는 크기가 유동적인 벡터 v를 선언한다. vector&lt;자료형&gt; v[n]; → 해당 자료형의 값을 담을 수 있는 크기가 n인 벡터 v를 선언한다. (n은 정수) v.push_back(a) → 요소 a를 벡터 v의 맨 뒤에 삽입한다. v.pop_back() → 벡터 v의 맨 뒤에 있는 요소를 제거한다. v.begin() → 벡터 v의 맨 앞에 있는 요소 v.end() → 벡터 v의 맨 뒤에 있는 요소의 바로 뒤 sort(v.begin(), v.end()); → 벡터 v를 오름차순으로 정렬한다. 알고리즘 문제를 풀다 보면 pair 컨테이너와 함께 쓰이는 경우가 종종 있다. vector &lt;pair&lt;자료형1, 자료형2&gt;&gt; v; → 자료형1과 자료형2에 해당하는 값을 담을 수 있는 페어로 구성된 크기가 유동적인 벡터 v를 선언한다. v.push_back(pair&lt;자료형1, 자료형2&gt;(a, b)); → 자료형1에 해당하는 값 a와 자료형2에 대항하는 값 b를 담은 페어를 벡터 v의 맨 뒤에 삽입한다. v.pop_back(); → 벡터 v의 맨 뒤에 있는 요소(페어)를 제거한다. v.clear(); → 벡터 내의 모든 요소들을 제거한다. v[i].first → 벡터의 i번째 페어에 들어있는 요소들 중 앞에 있는 요소를 참조한다. v[i].second → 벡터의 i번째 페어에 들어있는 요소들 중 뒤에 있는 요소를 참조한다. sort(v.begin(), v.end()); → 페어로 구성된 경우, 페어의 앞에 있는 요소를 기준으로 벡터 v를 오름차순으로 정렬한다. 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_2822 (2022. 11. 29. 풀이)1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;vector &lt;pair&lt;int, int&gt;&gt; v;vector &lt;pair&lt;int, int&gt;&gt; v2;int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, sum = 0; for (int i=0; i&lt;8; i++) { cin &gt;&gt; n; v.push_back(pair&lt;int, int&gt;(n, i+1)); } sort(v.begin(), v.end(), greater&lt;&gt;()); for (int i=0; i&lt;5; i++) { sum += v[i].first; v2.push_back(pair&lt;int, int&gt;(v[i].second, v[i].first)); } cout &lt;&lt; sum &lt;&lt; &quot;\\n&quot;; sort(v2.begin(), v2.end()); for (int i=0; i&lt;5; i++) { cout &lt;&lt; v2[i].first &lt;&lt; &quot; &quot;; }} boj_5635 (2022. 12. 1. 풀이)1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;vector &lt;pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; &gt; v;string s;int cmp(pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; a, pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt; b) { if (a.second.second != b.second.second) return a.second.second &gt; b.second.second; else { if (a.second.first != b.second.first) return a.second.first &gt; b.second.first; else return a.first.second &gt; b.first.second; }}int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, d, m, y; cin &gt;&gt; n; for (int i=0; i&lt;n; i++) { cin &gt;&gt; s &gt;&gt; d &gt;&gt; m &gt;&gt; y; v.push_back(pair &lt;pair&lt;string, int&gt;, pair&lt;int, int&gt;&gt;(pair&lt;string, int&gt;(s, d), pair&lt;int, int&gt;(m, y))); } sort(v.begin(), v.end(), cmp); cout &lt;&lt; v[0].first.first &lt;&lt; &quot;\\n&quot;; cout &lt;&lt; v[n-1].first.first &lt;&lt; &quot;\\n&quot;;} boj_14769 (2022. 11. 28. 풀이)123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;string a, b;vector &lt;pair&lt;int, string&gt;&gt; v;int main(void) { ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, k; cin &gt;&gt; n; for (int i=0; i&lt;n; i++) { cin &gt;&gt; a &gt;&gt; b; if (a[0] &gt;= 48 &amp;&amp; a[0] &lt;= 57) { k = stoi(a); v.push_back(pair&lt;int, string&gt;(k/2,b)); } else { k = stoi(b); v.push_back(pair&lt;int, string&gt;(k,a)); } } sort(v.begin(), v.end()); for (int i=0; i&lt;n; i++) { cout &lt;&lt; v[i].second &lt;&lt; &quot;\\n&quot;; }}","link":"/2022/12/06/boj-2822-5635-14769/"},{"title":"C++ 맵(map) 사용법 (BOJ 17219)","text":"map 컨테이너에 대하여벡터(vector)와 마찬가지로 C++의 표준 라이브러리에 내장된 컨테이너의 일종이다. key와 value라는 값이 페어(pair)로서 한 쌍을 이루는 것이 특징이며, key 값은 중복을 허용하지 않는다. 값을 저장할 때마다 map 내부의 값들은 key를 기준으로 자동으로 오름차순 정렬된다. 자료구조는 레드 블랙 트리(이진 탐색 트리)로 구현되어 있어, 최고 O(log N)의 시간 복잡도를 지닌다고 한다. (트리에 대한 자세한 내용은 추후에 다른 포스팅에서 다루어보려 한다.) map &lt;자료형1, 자료형2&gt; m1; → 자료형1에 해당하는 key 값과 자료형2에 해당하는 value 값을 저장할 수 있는 맵 m1을 선언한다. m1.insert({key값, value값}); → 페어 {key값, value값}을 맵 m1에 저장한다. (이 때, 해당 페어는 맵 m1에 자동으로 오름차순 정렬되어 저장된다.) m1.begin() → 맵 m1의 맨 앞에 있는 요소 m1.end() → 맵 m1의 맨 뒤에 있는 요소의 바로 뒤 m1.erase(key값); → 해당 key 값에 해당하는 페어를 맵 m1에서 찾아 삭제한다. m1.erase(위치); → 해당 위치에 있는 페어를 맵 m1에서 삭제한다. (이 때, 특정 위치는 m.begin()+n (n은 정수), 특정 범위는 **m.begin(), m.end()**와 같은 형태로 작성한다.) m1.clear(); → 맵 m1의 모든 요소들을 삭제한다. m1.find(key값) → 해당 key 값에 해당하는 페어가 있는지 찾는다. 없으면 m1.end()를 반환한다. m1.find(key값)-&gt;first → 해당 key 값에 해당하는 페어의 key 값 m1.find(key값)-&gt;second → 해당 key 값에 해당하는 페어의 value 값 다음은 BOJ의 몇몇 문제들을 벡터와 페어를 이용한 풀이들이다. boj_17219 (2022. 12. 13. 풀이)123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;string s, s2;map &lt;string, string&gt; m1;int main(void) { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); int n, m; cin &gt;&gt; n &gt;&gt; m; cin.ignore(); for (int i=0; i&lt;n; i++) { getline(cin, s, ' '); getline(cin, s2); m1.insert({s, s2}); } for (int i=0; i&lt;m; i++) { cin &gt;&gt; s; cout &lt;&lt; m1.find(s)-&gt;second &lt;&lt; &quot;\\n&quot;; }}","link":"/2022/12/13/boj-17219/"},{"title":"ARM Mac에서 이클립스 IDE를 실행하는 방법 (JDK 오류)","text":"애플 실리콘이 탑재된 첫 맥북이 세상에 나온 지도 벌써 2년이 넘었다. 갑작스런 변화에도 불구하고 많은 주요 소프트웨어들이 발빠르게 이에 대응하였고, 또 로제타 덕분에 큰 불편 없이 M1 칩이 탑재된 ARM 맥북을 사용하고 있다. 그런데 간혹 애플 실리콘을 지원하지 않는 소프트웨어들을 마주할 때면 곤혹스러움을 경험하게 된다. 이클립스 IDE 또한 그 중 하나였다. 이를 기반으로 한 전자정부 표준프레임워크 역시 당연하게도 마찬가지였다. 그래도 로제타가 있는데, 어떻게든 실행은 시킬 수 있지 않을까? 그래서 일단 설치해 봤다. 위와 같은 에러 메시지가 나타나며 실행이 되지 않는다. 구글링해 본 결과, Stack Overflow에서 해결 방법을 찾을 수 있었다. 우선 Eclipse Temurin에서 mac x64 아키텍처 전용 버전을 설치한다. 그러고 나서, 애플리케이션 폴더에 있는 이클립스(혹은 전자정부 표준프레임워크) 아이콘을 오른쪽 마우스로 클릭한 다음 ‘패키지 내용 보기’를 선택한다. Contents 폴더 안에 Info.plist라는 파일이 있을 것이다. 텍스트 에디터나 VSCode 등으로 해당 파일을 열어보면 &lt;string&gt;-vm&lt;/string&gt;으로 시작하는 코드가 주석 처리되어 있다. 해당 위치에 다음 코드를 붙여넣은 다음 저장해 준다. 1&lt;string&gt;-vm&lt;/string&gt;&lt;string&gt;/Library/Java/JavaVirtualMachines/temurin-19.jdk/Contents/Home/bin/java&lt;/string&gt; 그런 다음 다시 이클립스(혹은 전자정부 표준프레임워크)를 실행해 보면 정상적으로 작동하는 것을 확인할 수 있다. 참고로 현재 맥 전용으로 배포된 이클립스는 인텔 기반 맥을 위해 설계되어 있어서, 애플 실리콘에서 실행 시 로제타를 거쳐 작동하게 된다. 그렇기에 무거운 프로그램 특성 상 속도가 느려져 사용에 불편을 호소하는 개발자들이 많은 것 같다. 시간이 지날수록 애플 실리콘의 비중은 커질 것이므로, 이제는 이클립스도 애플 실리콘 지원을 준비해야 할 때가 아닌가 싶다.","link":"/2023/03/01/eclipse-ide-on-apple-silicon/"},{"title":"ARM Mac에서 발생한 다양한 MySQL 에러 해결","text":"M1 맥북 프로를 사용한 지 어언 3년이 지났지만 여전히 난감한 순간이 종종 있다. 이번에 겪은 MySQL 관련 이슈는 그 중 가장 골치아픈 녀석이었다. 참고로 필자가 겪은 시행착오가 모두 담겨져 있으므로 무작정 순서대로 따라하지 마시고, 우선 한 번 정독해 주시길 바란다. 1. root 계정으로의 접속 불가 이슈 $ mysql -u root $ ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO) $ sudo mysql -u root -p $ Enter password: $ ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES) 분명히 root 계정의 초기 비밀번호는 없을 텐데 어떤 방법을 시도해 보아도 MySQL에 접속할 수 없었다. 2. MySQL 재설치 (Anaconda, Homebrew) 참고: rangyu님의 문서 $ brew install mysql 위의 명령어를 이용해 Homebrew를 통해 MySQL을 설치했었다. 그런데 터미널에 MySQL이 설치된 경로를 알려주는 명령어를 입력했더니 다음과 같은 결과가 나왔다. $ where mysql $ ~/Documents/Anaconda3/bin/mysql 어째서인지 Anaconda에 설치된 MySQL만 인식이 되었다. 어차피 쓰지 않을 녀석인지라 해당 경로에 들어가서 ‘mysql’로 시작하는 파일들을 전부 지워 주었다. 그리고 Homebrew를 통해 설치한 MySQL도 깔끔하게 지운 뒤 재설치하기로 하였다. 우선 아래의 명령어를 입력해 실행 중인 MySQL 프로세스를 중지시킨다. $ brew services stop mysql 그런 다음 삭제 명령어를 입력해 준다. $ brew uninstall --force mysql 확실하게 지워주기 위해 아래의 명령어들을 차례대로 입력해 준다. $ sudo rm -rf /usr/local/mysql $ sudo rm -rf /usr/local/bin/mysql $ sudo rm -rf /usr/local/var/mysql $ sudo rm -rf /usr/local/Cellar/mysql $ sudo rm -rf /usr/local/mysql* $ sudo rm -rf /tmp/mysql.sock.lock $ sudo rm -rf /tmp/mysqlx.sock.lock $ sudo rm -rf /tmp/mysql.sock $ sudo rm -rf /tmp/mysqlx.sock $ sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist $ sudo rm -rf /Library/StartupItems/MySQLCOM $ sudo rm -rf /Library/PreferencePanes/My* 그러고 나서 다시 Homebrew를 통해 MySQL을 설치한 다음, 설치 경로를 확인해 보니 제대로 된 경로가 나온다. $ where mysql $ /opt/homebrew/bin/mysql 그러나 이번에는 또 다른 에러가 나를 반갑게 맞아주었다. 3. 소켓 에러 ー ERROR 2002 (HY000)우선 설치한 MySQL을 실행해 준다. $ brew services start mysql $ ==&gt; Successfully started `mysql` (label: homebrew.mxcl.mysql) 그러나 이번에는 다음과 같은 에러가 발생했다. $ mysql $ ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2) $ mysql.server start $ Starting MySQL $ ... ERROR! The server quit without updating PID file (/opt/homebrew/var/mysql/Edwardui-MacBookPro.local.pid). 참고: ryotaf님의 블로그 다음 경로로 들어가서 ls를 입력해 보면 MySQL 관련 에러 로그 파일이 있을 것이다. $ cd /opt/homebrew/var/mysql/ $ ls $ ... $ Edwardui-MacBookPro.local.err // 기기의 이름에 따라 파일명이 다름 $ ... 다음 명령어를 입력해 로그를 열어보았다. $ vi Edwardui-MacBookPro.local.err // 기기의 이름에 따라 파일명이 다름 그랬더니 다음과 같은 로그가 남아 있었다. $ [Server] Can't start server: Bind on TCP/IP port: Address already in use $ [Server] Do you already have another mysqld server running on port: 3306 ? $ [Server] Aborting 그러니까, 3306 포트를 이미 다른 프로세스가 사용 중일 수 있다는 말이었다. 그러나 짐작가는 것이 없었다. $ lsof -i TCP:3306 3306 포트를 사용 중인 프로세스를 찾는 명령어를 사용해 봤지만 아무 것도 나오지 않았다. $ mysql --help 위의 명령어를 입력하고 아래로 스크롤하다 보면 다음과 같이 config 파일의 경로가 나온다. $ ... $ Default options are read from the following files in the given order: $ /etc/my.cnf /etc/mysql/my.cnf /opt/homebrew/etc/my.cnf ~/.my.cnf $ ... 보통은 /opt/homebrew/etc/my.cnf에 작성되어 있다. $ vi /opt/homebrew/etc/my.cnf vi 또는 다른 편집 툴을 이용해 해당 파일에 ‘PORT = 3307’(즉 3306이 아닌 다른 포트 번호)을 추가해 주었다. 그러나 여전히 같은 에러가 반복되었다. 참고: harryTheGreat님의 블로그 위의 자료에 따르면 Homebrew로 설치한 MySQL의 경우 특정 설정 파일이 기존 config 파일을 덮어쓰므로 소용이 없다고 하는데, 이를 해결할 방법은 찾지 못했다. 4. MySQL 재설치 (.dmg) 그래서 결단을 내렸다. Homebrew로 설치한 MySQL을 위의 2번 과정을 반복해 말끔히 지우고, MySQL 커뮤니티 서버의 패키지 파일(.dmg)을 다운로드받아 설치하기로 했다. 여기서 다운로드받을 수 있다. 기기에 알맞은 DMG Archive를 다운로드 후 실행하여 설치하면 된다. 5. caching_sha2_password 플러그인 이슈 $ MySQLdb._exceptions.OperationalError: (2059, &quot;Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/Users/eddylily/Documents/anaconda3/lib/plugin/caching_sha2_password.so, 0x0002): tried: '/Users/eddylily/Documents/anaconda3/lib/plugin/caching_sha2_password.so' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/Users/eddylily/Documents/anaconda3/lib/plugin/caching_sha2_password.so' (no such file), '/Users/eddylily/Documents/anaconda3/lib/plugin/caching_sha2_password.so' (no such file)&quot;) 다른 팀원분께서 만드신 Django 프로젝트를 불러와 실행해야 하는데, 또 생소한 에러가 내 앞을 가로막았다. 이번 에러의 경우 비교적 간단하게 해결할 수 있었다. Mac의 설정에 들어가서 맨 아래로 내려보면 MySQL 메뉴가 생긴 것을 볼 수 있다. MySQL 서버가 실행 중인지 확인해 준 다음, Initialize Database 버튼을 눌러준다. Use Legacy Password Encryption(아래) 옵션을 체크해 주고, root 계정에서 사용할 비밀번호를 입력해 준 다음 OK를 눌러 저장한다. 이 비밀번호를 Django 프로젝트의 settings.py에도 반영해 준다. 마침내 프로젝트가 정상적으로 실행이 되었다!","link":"/2023/11/14/mysql-errors-on-apple-silicon/"},{"title":"청룡을 맞이할 준비","text":"2016년 이후로 나의 시간은 멈춰 있었다. 정신병은 지난 7년 동안 나를 옭아매어 앞으로 나아가지 못하게 했다.그러나 앞으로는 다를 것이다. 지금, 갑진년이라는 값진 한 해를 앞두고 청룡이 비상할 준비를 마쳤다.에드의 일상 복귀의 원년이 될 2024년을 앞두고 간략한 회고를 여기 남긴다. 2016년, 우울의 시작은 여기 3월 1일, 기숙형 고등학교 입사 4월 1일, μ’s 해산 4월 6일, 고1 4월 학력평가 폭망 4월 7일, 1학년 1학기 심화반 탈락 처음으로 마음 깊이 응원했던 대상인 μ’s의 마지막 이틀 간의 공연이 있었던 목요일과 금요일, 나는 도저히 밥이 목으로 넘어가지 않아 끼니를 걸렀다. 살면서 이렇게까지 멘탈이 망가진 적은 처음이었다. 주변 친구들 ー당시의 에드는 친구가 많았다ー 이 걱정해 줄 정도였다. 그로 인한 후유증이라고 하면 핑계겠지만, 교내 심화반 입성 여부가 달린 4월 사설 학력평가를 망치고 만다. 정확한 성적은 기억나지 않지만 3월 전국연합학령평가에서 전교 13등을 기록한 것과는 확실히 대조적인 결과였다. 이후 나의 성적은 줄곧 우하향 그래프를 그렸고, 1학년 말에는 전교 등수 세 자리 수로 밀려나기에 이르렀다. 당시 담임 교사와의 개인 면담에서 펑펑 울었던 기억이 난다. 중학교 수석 입학생이었던 가짜 우등생은 그렇게 몰락했다. 2017년, 소중한 사람을 잃고 2016년 12월 2일. 일기장에 처음으로 ‘항우울제’라는 단어가 등장한 날이다. (중략) 자괴감과 우울감에 휩싸였다.이후의 수학 시간에는 교과서 문제조차, 심지어는 1번 문제도 풀지 못하자 짜증이 솟구쳐 연습장을 찢어버렸다.‘항우울제’, 라는 단어가 떠올라 검색도 해 보다가 (중략) 어째서인지 눈물이 멈추지 않았다. (중략) 이후 2학년으로 진급한 2017년 한 해 동안은 소논문을 작성하느라 바빴다는 사실만 떠오를 뿐 별다른 기억은 없다. 11월 학력평가 직전에, 오랜 기간 투병해 오시던 할머니께서 먼 길을 떠나셨다. 그 날은 정기 외박일이 아니었음에도, 나는 담임 교사에게 “할머니께서 많이 편찮으시니 이번 주에 면회를 다녀오고 싶다”는 이유로 외박을 신청했다. 어째서인지 그래야겠다는 생각이 들었다. 고등학교 3년 동안 그것이 처음이자 마지막 비정기 외박이었다. 마중나오셨던 부모님과 나는 집에 가던 길에 할머니께서 위독하시다는 연락을 받고 곧장 차로 2시간 걸리는 병원으로 향했다. 불과 한 달 전까지만 해도 정정하셨던 분께서 침상에서 고통스러운 숨을 내쉬고 계셨다. 만약 그 날 외박을 신청하지 않았더라면 나는 할머니의 임종을 지키지 못했을 것이다. 2018년, 해방의 그 날은 언제 인간관계가 얽히고 설킨 한 해였다. 정말이지 서로 맞지 않는 사람들과 기숙학교 내에서 365일 24시간을 붙어 지내야 한다는 게 너무나 괴로웠다. 심지어는 룸메이트와도 불화가 생겨 방에 들어가기도 싫어서 수능 직전까지 반 년 동안 면학실에 따로 살림을 차리고 살기도 했다. 2018년 11월 15일, 해방의 그 날만을 손꼽아 기다리며 나는 수련을 거듭했다. 성적이야 잘 나오면 좋지만, 그보다도 이 지긋지긋한 악몽에서 벗어나고 싶다는 마음이 더 강했다. 마침내, 허무하게도 그 날은 지나갔다. 성적에 반전은 없었다. 오히려 평소보다 국어 성적이 낮게 나와 입시에 불리해졌다. 그러나 재수는 생각해 본 적도 없었기에, 결국은 성적에 맞춰 바라지 않던 대학의 임의의 학과에 진학한 다음, 컴퓨터공학과로 전과하기로 마음먹는다. 2019년, 인생의 터닝 포인트 8월 24일, 내가 동경해 마지않는 분이 계신 S대의 학회 세미나에 외부인으로서 참석했다. 그 날을 나는 인생의 터닝 포인트로 생각한다. 서울의 대학생들이 각자 얼마나 열심히, 그리고 얼마나 즐겁게 살아가고 있는지 가까이에서 알 수 있었던 날이다. 사실 그 전에도 서울에는 종종 다녀오며 이런저런 것들을 느끼곤 했지만, 이 날 이후로 많은 것이 바뀌었다. 나도 그들과 같은 삶을 살고 싶어졌다. 우선 다니고 있는 대학을 자퇴하고, 서울 소재 대학의 컴퓨터공학과를 목표로 N수를 하기로 마음 먹었다. 부모님을 설득한 끝에 자퇴 대신 휴학을 하고 수능 공부를 시작하기로 했다. (어차피 서울 입성 자체가 목표였기 때문에, 입시 성적이 좋지 않더라도 무조건 자퇴할 생각이었지만 말이다.) 2020년, 닥쳐온 코로나 블루 정신 질환이 빠르게 악화된 한 해였다. 연초에는 좋은 친구라고 생각했던 사람으로부터 추행을 당했다. 너무나도 당황스럽고 불쾌한 일이었다. 그 사람이 나의 근무처를 알고 있었기에 아르바이트도 곧장 그만두었다. 이후에는 다른 사람의 사이버 스토킹에 시달리기도 했다. 나의 인간 불신은 아마도 이 때부터 시작된 것 같다. 한편, 설날을 전후로 세상은 많은 것이 달라져버렸다. 코로나바이러스감염증-19가 국내에 빠르게 번지기 시작하면서 공부하러 다니던 도서관은 문을 닫았고, 3월이 되어서는 개학 시기 연기와 함께 대학수학능력시험도 2주 미뤄짐이 발표되었다. 이 때부터 나는 바깥에 나가지 않고 수능을 준비하며 집에서만 생활했다. 이후 6월 모의평가 현장 응시를 위해 처음으로 번화가에 다녀왔다. 옆으로 사람이 지나가기만 해도 몸이 과도한 회피 반응을 일으켰다. 이 때는 그래도 대인기피증 초기였다. 여름을 지나면서 나의 우울과 불안은 극에 달했다. 끊임없는 자살 충동에 시달렸고 죽는 것 외에는 아무 것도 생각할 수가 없었다. 입시 공부도 온전히 할 수 없는 정신 상태였다. 버스를 타러 나가면 정류장에 서 있는 모든 사람들이 나를 쏘아붙일 것만 같아 패닉 상태에 빠지곤 했다. 이 쯤부터 내 상태가 이상하다는 것을 느끼기 시작한 것 같다. 3월까지만 해도 공부한 만큼 성적이 나와서, 이대로만 공부하면 성공하겠다는 강한 확신이 있었지만, 하반기에 접어들고나서부터는 점점 공부를 포기하기에 이르렀다. 9월 모의평가 이후로는 사실상 공부를 아예 하지 않았다고 보아도 좋을 정도였다. 이 때의 나는 어차피 서울 소재 대학에 진학하는 것은 어떻게 봐도 무리라고 생각했다. 대학 진학 여부와 상관없이 아무튼 수도권에서 생활할 수만 있으면 나는 만족이었기 때문에, 수원에서 고시원 생활을 하며 전업 아르바이트를 뛰며 독립하겠다는 계획을 세웠다. 어느 동에 거주하며 어느 직종에서 근무할지까지 꽤 구체적으로 생각해 두었다. 2021년, 망가질 대로 망가진 해탈한 상태로 오직 참여 자체에만 의의를 두고 응시한 대학수학능력시험에서 나는 의외의 성적표를 받아들었다. 정시로 인서울 하위권 대학에 갈 수 있는 성적이 나온 것이다. 2년 새에 학령 인구가 53만 명에서 42만 명으로 어마무시하게 줄어든 덕분에, 공부를 하지 않고도 나의 백분위가 상승하는 효과를 볼 수 있었다. 그렇게 지금 재학 중인 대학의 인공지능학과에 전략적으로 지원했고, 문을 닫고 대학에 들어가는 쾌거를 이루었다. 그러나 그렇게 입성한 대학에서도 나는 행복하지 못했다. 아침에 일어나 정신을 차려보면 이유를 모른 채 울고 있었다. 전적대에서는 1년 동안 배울 내용을 한 학기만에 가르치는 듯한 압축적인 커리큘럼과 버거운 과제들도 나를 괴롭혔다. 입학 후 한 달 여가 지난 어느 날, 나는 우연히 교내 상담 센터의 전단지를 보고 상담을 신청했다. 하지만 상담은 내게 큰 도움이 되지 못했다. 상태는 더욱 악화되어 심한 불면증까지 찾아와 이틀에 한 번 꼴로 겨우 잠에 들기도 했다. 결국 5년 만에 나는 약물 치료를 위해 정신건강의학과에 내원하였다. 초진을 받고 항우울제와 항불안제를 처방받아 나온 그 날은 너무나도 허무했다. 고작 이 작은 정제 몇 개를 얻지 못해서 날아간 지난 5년이 아깝기 그지없었다. 이후 복용량을 점점 늘려 나중에는 하루에 18개의 약을 먹기도 하였다. 2022년, 조금은 쉬었다 가도 1학년 2학기의 성적은 그야말로 처참했다. 난생 처음으로 2점대도 아닌 무려 1.82라는 기록적인 평점을 받았다. 그나마 학사 경고를 받지는 않았다는 것이 위안일까. 하지만 국가장학금 수급 자격에는 한참 미달하는 성적이었다. 덕분에 부모님께 한 소리 들어야 했다. 학업을 이어나갈 상태가 아니라고 판단한 나는 휴학을 하기로 마음먹었지만, 그러면 금전적 지원을 하지 않을 것이라는 부모님의 말에 나는 억지로 2학년 1학기까지 다니게 된다. 평점은 조금 올랐으나 여전히 국가장학금 수급 자격에는 미달한 2.62이었다. 그렇게 결국 나는 휴학계를 냈고 18개월 만에 다시 비수도권으로 하방하게 되었다. 휴학을 하고 처음 두 달 동안은 아무 것도 하지 않고 그냥 쉬었다. 9월이 되어서는 과거에 GameMaker로 개발한 게임들 중 몇몇을 리마스터하였다. 그러다가 간만에 새로운 게임을 만들어보자는 생각에 신작 RPG를 기획하기 시작했다. 이 프로젝트는 여전히 현재 진행형이다. 2023년, 다시 도약해 나아가 게임 내에 삽입할 일러스트 등을 자급자족해야 하는데, 그림을 그리는 속도가 코딩 속도를 도저히 따라가지 못해서 게임 개발은 잠시 중단했다. 한편 여행 자금을 모으기 위해, 그리고 일상으로의 복귀를 위해 아르바이트를 시작했다. 그렇게 8월, 폭염을 뚫고 도쿄에 다녀왔다. 비록 라프리엘 라이브 투어는 잠정 연기되어 가지 못했지만, 란구 선생님의 개인전에도 다녀왔고, 중고 서점에서 나비 선생님의 일러스트집을 구하는 등의 수확도 있었다. 봇치 더 록 콜라보 운동화를 포함한 각종 굿즈들도 쇼핑했다. 오시들이 좋아하는 스다치소바나 규땅 같은 독특한 음식들도 먹어보았다. 여러모로 유익한 6일간이었다. 그리고 마침내 1년 간의 휴식을 마치고 복학했다. 9월은 순조로웠다. 10월은 그럭저럭 지낼 만했다. 11월은 너무나도 버거웠다. 12월 초는 궁지에 몰린 쥐와 같은 심정이었다. 이번에도 성적이 좋지 않으면 안 된다는 강박에 시달렸다. 이번 학기는 2.86이라는 평점으로 마무리했다. 지난 학기들보다는 확실히 나아졌지만 그렇다고 해서 잘했다고 말하기는 힘든 성적이다. 불행 중 다행이라고 해야 할지, 일단 국가장학금 수급 자격은 충족했다. 그래, 앞으로 더 나아지면 되겠지. 2024년, 정신병 극복의 원년 이제 청룡을 맞이할 준비를 해야 한다. 개인적으로는 2024년을 정신병 극복의 원년으로 삼고 싶다는 소망이 있다. 백룡의 해에 태어난 내가 맞이하는 세 번째 용의 해이다. 이제는 앞으로 나아가고 싶다. 줄곧 정체된 삶을 살아왔다. 세상으로부터 나 자신을 고립시키기만 해 왔다. 앞으로는 많은 사람들과 만나서 교류하고 싶다. 다양한 외부 활동에 참여해 보고 싶다. 가능하다면 실적도 쌓고 싶다. 돈에 쪼들리고 싶지 않다. 우울의 늪에서 반영구적으로 탈출해 평범한 일상을 누리고 싶다. 요약하자면, 행복을 되찾는 한 해가 되었으면 한다. 마지막으로 대입 준비에 한창이신 나비님과 애니메이터 연수 중이신 아츠마루님께서 새해에 좋은 성취를 이루시고 항상 평안하시길 바라본다.","link":"/2023/12/31/retrospective/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/tags/TensorFlow/"},{"name":"GameMaker™","slug":"GameMaker™","link":"/tags/GameMaker%E2%84%A2/"},{"name":"html, css","slug":"html-css","link":"/tags/html-css/"},{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"Diary","slug":"Diary","link":"/tags/Diary/"}],"categories":[{"name":"웹","slug":"웹","link":"/categories/%EC%9B%B9/"},{"name":"블로그","slug":"웹/블로그","link":"/categories/%EC%9B%B9/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"게임메이커","slug":"게임메이커","link":"/categories/%EA%B2%8C%EC%9E%84%EB%A9%94%EC%9D%B4%EC%BB%A4/"},{"name":"CV","slug":"웹/CV","link":"/categories/%EC%9B%B9/CV/"},{"name":"🦋 에드의 일상","slug":"🦋-에드의-일상","link":"/categories/%F0%9F%A6%8B-%EC%97%90%EB%93%9C%EC%9D%98-%EC%9D%BC%EC%83%81/"},{"name":"과거작","slug":"게임메이커/과거작","link":"/categories/%EA%B2%8C%EC%9E%84%EB%A9%94%EC%9D%B4%EC%BB%A4/%EA%B3%BC%EA%B1%B0%EC%9E%91/"},{"name":"알고리즘","slug":"알고리즘","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"BOJ","slug":"알고리즘/BOJ","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/BOJ/"},{"name":"기타","slug":"기타","link":"/categories/%EA%B8%B0%ED%83%80/"},{"name":"데이터베이스","slug":"데이터베이스","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"}]}